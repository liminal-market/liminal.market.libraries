[
	{
		"name": "abis.ts",
		"path": "src\\abis.ts",
		"folderPath": "src",
		"fileContent": "export default class Abis {\r\n\r\n    static LiminalMarketExternalServiceAbi = [\n{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buySecurityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},\n{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"sellSecurityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n    static LiminalMarketAbi = [\n{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tsl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledQty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAvgPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"side\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aUsdBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},\n{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getSecurityToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n\r\n    static BalanceOfAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n}",
		"documentation": "# abis.ts\n\nThis is a TypeScript code file that exports a class named `Abis`. The class contains three static properties: `LiminalMarketExternalServiceAbi`, `LiminalMarketAbi`, and `BalanceOfAbi`. These properties store the ABI (Application Binary Interface) of different smart contracts. The ABI is an interface used to interact with the smart contracts on the Ethereum blockchain.\n\n## Class: Abis\n\n### LiminalMarketExternalServiceAbi\n\nThis property contains the ABI for the `LiminalMarketExternalService` smart contract. It has two functions:\n\n#### buySecurityToken(walletAddress: address, symbol: string, amount: uint256)\n\nThis function allows a user to buy a security token.\n\n- `walletAddress`: The address of the user's wallet.\n- `symbol`: The symbol of the security token to be bought.\n- `amount`: The amount of the security token to be bought.\n\n#### sellSecurityToken(walletAddress: address, symbol: string, quantity: uint256)\n\nThis function allows a user to sell a security token.\n\n- `walletAddress`: The address of the user's wallet.\n- `symbol`: The symbol of the security token to be sold.\n- `quantity`: The quantity of the security token to be sold.\n\n### LiminalMarketAbi\n\nThis property contains the ABI for the `LiminalMarket` smart contract. It has one event and one function:\n\n#### Event: OrderExecuted\n\nThis event is emitted when an order is executed.\n\n- `orderId`: The ID of the executed order.\n- `recipient`: The address of the recipient.\n- `symbol`: The symbol of the security token.\n- `tsl`: The timestamp of the order.\n- `filledQty`: The filled quantity of the order.\n- `filledAvgPrice`: The average filled price of the order.\n- `side`: The side of the order (buy or sell).\n- `filledAt`: The timestamp when the order was filled.\n- `serviceFee`: The service fee for the order.\n- `aUsdBalance`: The aUSD balance of the user.\n- `spender`: The address of the spender.\n\n#### getSecurityToken(symbol: string)\n\nThis function returns the address of a security token.\n\n- `symbol`: The symbol of the security token.\n\n### BalanceOfAbi\n\nThis property contains the ABI for the `BalanceOf` smart contract. It has one function:\n\n#### balanceOf(account: address)\n\nThis function returns the balance of an account.\n\n- `account`: The address of the account.\n\n## Usage Examples\n\n```typescript\nimport Abis from './abis';\n\n// Instantiate a contract with the LiminalMarketExternalServiceAbi\nconst liminalMarketExternalService = new web3.eth.Contract(Abis.LiminalMarketExternalServiceAbi, contractAddress);\n\n// Call the buySecurityToken function\nliminalMarketExternalService.methods.buySecurityToken(walletAddress, symbol, amount).send({ from: senderAddress });\n\n// Instantiate a contract with the LiminalMarketAbi\nconst liminalMarket = new web3.eth.Contract(Abis.LiminalMarketAbi, contractAddress);\n\n// Call the getSecurityToken function\nliminalMarket.methods.getSecurityToken(symbol).call();\n\n// Instantiate a contract with the BalanceOfAbi\nconst balanceOf = new web3.eth.Contract(Abis.BalanceOfAbi, contractAddress);\n\n// Call the balanceOf function\nbalanceOf.methods.balanceOf(account).call();\n```",
		"isFolder": false,
		"updated": "2023-04-17T15:01:51.208Z",
		"sidebar_position": 0,
		"sidebar_label": "abis.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"abis.ts\"\r\nThe file name is: abis.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nexport default class Abis {\r\n\r\n    static LiminalMarketExternalServiceAbi = [\n{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buySecurityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},\n{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"sellSecurityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n    static LiminalMarketAbi = [\n{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tsl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledQty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAvgPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"side\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filledAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aUsdBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},\n{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getSecurityToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n\r\n    static BalanceOfAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\abis.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "Helper.ts",
		"path": "src\\Helper.ts",
		"folderPath": "src",
		"fileContent": "import NetworkType from \"./networks/NetworkType\";\r\nimport MumbaiNetwork from \"./networks/MumbaiNetwork\";\r\nimport {Provider} from \"@ethersproject/abstract-provider\";\r\nimport {Signer} from \"ethers\";\r\nimport LiminalMarket from \"./index\";\r\n\r\nexport default class Helper {\r\n    static AddressZero = '0x0000000000000000000000000000000000000000';\r\n\r\n    public static setCookie(name: string, value: string) {\r\n        if (typeof document == 'undefined') return;\r\n        let date = new Date();\r\n        this.deleteCookie(name);\r\n        document.cookie = name + \"=\" + value + \"; expires=Mon, 2 Dec \" + (date.getFullYear() + 1) + \" 12:00:00 UTC;path=/;SameSite=Strict;\";\r\n    }\r\n\r\n    public static getCookieValue(name: string) {\r\n        if (typeof document == 'undefined') return;\r\n        return document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)')?.pop() || '';\r\n    }\r\n\r\n    public static deleteCookie(name: string) {\r\n        if (typeof document == 'undefined') return;\r\n        document.cookie = name + \"=0; expires=Mon, 2 Dec 2020 12:00:00 UTC;path=/\";\r\n    }\r\n\r\n    public static async loadLiminalMarket(walletAddress: string, provider: Provider, signer: Signer, chainId: number, serviceContractAddress: string | undefined) {\r\n        LiminalMarket.Provider = provider;\r\n        LiminalMarket.Signer = signer;\r\n\r\n        LiminalMarket.Network = NetworkType.getInstance(chainId) ?? new MumbaiNetwork();\r\n        if (LiminalMarket.Network.ChainId == 0) {\r\n            throw new Error('Network is not supported. Using chainId ' + chainId + '. Try switching to different network, e.g. Mumbai');\r\n        }\r\n\r\n        LiminalMarket.ServiceContractAddress = (serviceContractAddress) ? serviceContractAddress : LiminalMarket.Network.NO_FEE_SERVICE_CONTRACT_ADDRESS;\r\n\r\n        if (!LiminalMarket.ServiceContractAddress) {\r\n            throw new Error('ServiceContractAddress cannot be empty. You can get service contract address by signing contract at https://liminal.market/contract. No cost (except gas)')\r\n        }\r\n\r\n        if (LiminalMarket.ServiceContractAddress == LiminalMarket.Network.NO_FEE_SERVICE_CONTRACT_ADDRESS) {\r\n            console.debug('No service contract address set. You will not receive any service fee. Check out https://liminal.market/contract/')\r\n        }\r\n\r\n        LiminalMarket.WalletAddress = walletAddress;\r\n    }\r\n}",
		"documentation": "# Helper.ts\n\nThe `Helper.ts` file is a TypeScript module that exports a `Helper` class. This class provides utility functions for managing cookies and loading the LiminalMarket instance. The class also contains a static property `AddressZero` which represents the Ethereum address with all zeros.\n\n## Table of Contents\n\n- [Static Properties](#static-properties)\n- [Methods](#methods)\n  - [setCookie](#setcookie)\n  - [getCookieValue](#getcookievalue)\n  - [deleteCookie](#deletecookie)\n  - [loadLiminalMarket](#loadliminalmarket)\n\n## Static Properties\n\n- `AddressZero`: A string representing the Ethereum address with all zeros.\n\n## Methods\n\n### setCookie\n\nSets a cookie with the given name and value.\n\n```typescript\npublic static setCookie(name: string, value: string): void\n```\n\n**Parameters:**\n\n- `name` (string): The name of the cookie.\n- `value` (string): The value of the cookie.\n\n**Example:**\n\n```typescript\nHelper.setCookie(\"username\", \"JohnDoe\");\n```\n\n### getCookieValue\n\nReturns the value of the cookie with the given name.\n\n```typescript\npublic static getCookieValue(name: string): string\n```\n\n**Parameters:**\n\n- `name` (string): The name of the cookie.\n\n**Returns:**\n\n- (string): The value of the cookie.\n\n**Example:**\n\n```typescript\nconst username = Helper.getCookieValue(\"username\");\n```\n\n### deleteCookie\n\nDeletes the cookie with the given name.\n\n```typescript\npublic static deleteCookie(name: string): void\n```\n\n**Parameters:**\n\n- `name` (string): The name of the cookie.\n\n**Example:**\n\n```typescript\nHelper.deleteCookie(\"username\");\n```\n\n### loadLiminalMarket\n\nLoads the LiminalMarket instance with the given parameters.\n\n```typescript\npublic static async loadLiminalMarket(walletAddress: string, provider: Provider, signer: Signer, chainId: number, serviceContractAddress: string | undefined): Promise<void>\n```\n\n**Parameters:**\n\n- `walletAddress` (string): The wallet address.\n- `provider` (Provider): The Ethereum provider.\n- `signer` (Signer): The Ethereum signer.\n- `chainId` (number): The chain ID of the Ethereum network.\n- `serviceContractAddress` (string | undefined): The service contract address (optional).\n\n**Example:**\n\n```typescript\nawait Helper.loadLiminalMarket(\"0x1234...\", provider, signer, 80001, \"0x5678...\");\n```\n\n**Note:**\n\nIf the `serviceContractAddress` is not provided, the `NO_FEE_SERVICE_CONTRACT_ADDRESS` from the network instance will be used. If the network is not supported, an error will be thrown.",
		"isFolder": false,
		"updated": "2023-04-17T16:11:03.349Z",
		"sidebar_position": 1,
		"sidebar_label": "Helper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"Helper.ts\"\r\nThe file name is: Helper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport NetworkType from \"./networks/NetworkType\";\r\nimport MumbaiNetwork from \"./networks/MumbaiNetwork\";\r\nimport {Provider} from \"@ethersproject/abstract-provider\";\r\nimport {Signer} from \"ethers\";\r\nimport LiminalMarket from \"./index\";\r\n\r\nexport default class Helper {\r\n    static AddressZero = '0x0000000000000000000000000000000000000000';\r\n\r\n    public static setCookie(name: string, value: string) {\r\n        if (typeof document == 'undefined') return;\r\n        let date = new Date();\r\n        this.deleteCookie(name);\r\n        document.cookie = name + \"=\" + value + \"; expires=Mon, 2 Dec \" + (date.getFullYear() + 1) + \" 12:00:00 UTC;path=/;SameSite=Strict;\";\r\n    }\r\n\r\n    public static getCookieValue(name: string) {\r\n        if (typeof document == 'undefined') return;\r\n        return document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)')?.pop() || '';\r\n    }\r\n\r\n    public static deleteCookie(name: string) {\r\n        if (typeof document == 'undefined') return;\r\n        document.cookie = name + \"=0; expires=Mon, 2 Dec 2020 12:00:00 UTC;path=/\";\r\n    }\r\n\r\n    public static async loadLiminalMarket(walletAddress: string, provider: Provider, signer: Signer, chainId: number, serviceContractAddress: string | undefined) {\r\n        LiminalMarket.Provider = provider;\r\n        LiminalMarket.Signer = signer;\r\n\r\n        LiminalMarket.Network = NetworkType.getInstance(chainId) ?? new MumbaiNetwork();\r\n        if (LiminalMarket.Network.ChainId == 0) {\r\n            throw new Error('Network is not supported. Using chainId ' + chainId + '. Try switching to different network, e.g. Mumbai');\r\n        }\r\n\r\n        LiminalMarket.ServiceContractAddress = (serviceContractAddress) ? serviceContractAddress : LiminalMarket.Network.NO_FEE_SERVICE_CONTRACT_ADDRESS;\r\n\r\n        if (!LiminalMarket.ServiceContractAddress) {\r\n            throw new Error('ServiceContractAddress cannot be empty. You can get service contract address by signing contract at https://liminal.market/contract. No cost (except gas)')\r\n        }\r\n\r\n        if (LiminalMarket.ServiceContractAddress == LiminalMarket.Network.NO_FEE_SERVICE_CONTRACT_ADDRESS) {\r\n            console.debug('No service contract address set. You will not receive any service fee. Check out https://liminal.market/contract/')\r\n        }\r\n\r\n        LiminalMarket.WalletAddress = walletAddress;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\Helper.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "Account.ts",
		"path": "src\\dto\\Account.ts",
		"folderPath": "src\\dto",
		"fileContent": "\r\nexport interface Account {\r\n    token : string;\r\n    address : string;\r\n    brokerId : string;\r\n    chainId : number;\r\n}",
		"documentation": "# Account.ts\n\n## Overview\n\n`Account.ts` is a TypeScript code file that exports an interface named `Account`. This interface is used to define the structure of an account object, which includes properties such as `token`, `address`, `brokerId`, and `chainId`. This documentation will provide a detailed description of the `Account` interface, its properties, and examples of how to use it.\n\n## Interface: Account\n\nThe `Account` interface is a simple structure that represents an account in the system. It contains the following properties:\n\n- `token`: A string representing the authentication token for the account.\n- `address`: A string representing the account's address, which is typically a unique identifier for the account.\n- `brokerId`: A string representing the broker ID associated with the account.\n- `chainId`: A number representing the blockchain network ID that the account is associated with.\n\n### Example Usage\n\nHere's an example of how to create an object that implements the `Account` interface:\n\n```typescript\nconst myAccount: Account = {\n  token: \"*****\",\n  address: \"0x123456789abcdef\",\n  brokerId: \"broker-123\",\n  chainId: 1,\n};\n```\n\nYou can also create a function that takes an `Account` object as a parameter:\n\n```typescript\nfunction displayAccountInfo(account: Account) {\n  console.log(`Address: ${account.address}`);\n  console.log(`Broker ID: ${account.brokerId}`);\n  console.log(`Chain ID: ${account.chainId}`);\n}\n\ndisplayAccountInfo(myAccount);\n```\n\n## Properties\n\n### token\n\n- Type: `string`\n- Description: The authentication token for the account. This token is used to authenticate the user when making requests to the system. It should be kept secret and not shared with others.\n\n### address\n\n- Type: `string`\n- Description: The account's address, which is a unique identifier for the account. This address is typically a hexadecimal string representing the public key of the account.\n\n### brokerId\n\n- Type: `string`\n- Description: The broker ID associated with the account. This ID is used to identify the broker that the account is associated with.\n\n### chainId\n\n- Type: `number`\n- Description: The blockchain network ID that the account is associated with. This ID is used to identify the specific blockchain network that the account is connected to.\n\n## Conclusion\n\nThe `Account.ts` file provides a simple interface for representing an account in the system. By using this interface, developers can easily create and manage account objects with the required properties, such as `token`, `address`, `brokerId`, and `chainId`. This interface can be used in various parts of the application to ensure consistent handling of account data.",
		"isFolder": false,
		"updated": "2023-04-17T15:04:45.992Z",
		"sidebar_position": 0,
		"sidebar_label": "Account.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\dto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"Account.ts\"\r\nThe file name is: Account.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\n\r\nexport interface Account {\r\n    token : string;\r\n    address : string;\r\n    brokerId : string;\r\n    chainId : number;\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\dto\\Account.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "dto"
		}
	},
	{
		"name": "ExecuteOrderResult.ts",
		"path": "src\\dto\\ExecuteOrderResult.ts",
		"folderPath": "src\\dto",
		"fileContent": "import OrderDto from \"./OrderDto\";\r\n\r\nexport default interface ExecuteOrderResult {\r\n    success : boolean;\r\n    message : string;\r\n    order : OrderDto;\r\n\r\n}",
		"documentation": "# ExecuteOrderResult.ts\n\nThis is a TypeScript code file that defines an interface called `ExecuteOrderResult`. The interface is used to represent the result of an order execution operation. It contains three properties: `success`, `message`, and `order`. This documentation will provide a detailed description of the interface, its properties, and examples of how to use it.\n\n## Interface Description\n\nThe `ExecuteOrderResult` interface is designed to standardize the structure of the response object returned by a function or method that executes an order. It contains the following properties:\n\n- `success`: A boolean value indicating whether the order execution was successful or not.\n- `message`: A string value providing additional information about the result of the order execution. This can be an error message or a success message, depending on the value of the `success` property.\n- `order`: An instance of the `OrderDto` class, which represents the order that was executed.\n\n## Usage Examples\n\nHere are some examples of how to use the `ExecuteOrderResult` interface in your code:\n\n### Example 1: Creating an instance of ExecuteOrderResult\n\n```typescript\nimport ExecuteOrderResult from \"./ExecuteOrderResult\";\nimport OrderDto from \"./OrderDto\";\n\nconst order: OrderDto = {\n  // ... order properties ...\n};\n\nconst executeOrderResult: ExecuteOrderResult = {\n  success: true,\n  message: \"Order executed successfully\",\n  order: order,\n};\n```\n\n### Example 2: Using ExecuteOrderResult in a function\n\n```typescript\nimport ExecuteOrderResult from \"./ExecuteOrderResult\";\nimport OrderDto from \"./OrderDto\";\n\nfunction executeOrder(order: OrderDto): ExecuteOrderResult {\n  // ... perform order execution logic ...\n\n  if (/* order execution is successful */) {\n    return {\n      success: true,\n      message: \"Order executed successfully\",\n      order: order,\n    };\n  } else {\n    return {\n      success: false,\n      message: \"Order execution failed\",\n      order: order,\n    };\n  }\n}\n```\n\n## Technical Concepts\n\n### TypeScript Interfaces\n\nIn TypeScript, interfaces are used to define the structure of an object. They can be used to enforce a specific shape for an object, ensuring that it contains the required properties with the correct types. In this code file, the `ExecuteOrderResult` interface is used to define the structure of the response object returned by an order execution function or method.\n\n### OrderDto\n\nThe `OrderDto` class is imported from another file and is used as the type for the `order` property in the `ExecuteOrderResult` interface. This class represents an order and should contain all the necessary properties and methods related to an order.",
		"isFolder": false,
		"updated": "2023-04-17T15:06:18.041Z",
		"sidebar_position": 1,
		"sidebar_label": "ExecuteOrderResult.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\dto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ExecuteOrderResult.ts\"\r\nThe file name is: ExecuteOrderResult.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport OrderDto from \"./OrderDto\";\r\n\r\nexport default interface ExecuteOrderResult {\r\n    success : boolean;\r\n    message : string;\r\n    order : OrderDto;\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\dto\\ExecuteOrderResult.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "dto"
		}
	},
	{
		"name": "KycStatus.ts",
		"path": "src\\dto\\KycStatus.ts",
		"folderPath": "src\\dto",
		"fileContent": "export default interface KycStatus {\r\n    isValidKyc : boolean;\r\n    brokerId : string;\r\n    status : string;\r\n    hasBuyingPower : boolean;\r\n    message : string;\r\n}",
		"documentation": "# KycStatus.ts\n\nKycStatus.ts is a TypeScript code file that defines an interface called `KycStatus`. This interface is used to represent the Know Your Customer (KYC) status of a user in a financial application. The KYC process is a standard practice in the finance industry to verify the identity of clients and assess their suitability for financial services.\n\n## Interface: KycStatus\n\nThe `KycStatus` interface consists of the following properties:\n\n- `isValidKyc`: A boolean value that indicates whether the user has a valid KYC status.\n- `brokerId`: A string representing the unique identifier of the broker responsible for the user's account.\n- `status`: A string representing the current status of the user's KYC process (e.g., \"pending\", \"approved\", \"rejected\").\n- `hasBuyingPower`: A boolean value that indicates whether the user has the ability to make purchases in the financial application.\n- `message`: A string containing any additional information or messages related to the user's KYC status.\n\n### Example Usage\n\nHere's an example of how to use the `KycStatus` interface in a TypeScript file:\n\n```typescript\nimport KycStatus from './KycStatus';\n\nconst userKycStatus: KycStatus = {\n  isValidKyc: true,\n  brokerId: '12345',\n  status: 'approved',\n  hasBuyingPower: true,\n  message: 'KYC verified successfully',\n};\n\nfunction displayKycStatus(kycStatus: KycStatus) {\n  console.log(`User KYC status: ${kycStatus.status}`);\n  console.log(`Broker ID: ${kycStatus.brokerId}`);\n  console.log(`Has buying power: ${kycStatus.hasBuyingPower}`);\n  console.log(`Message: ${kycStatus.message}`);\n}\n\ndisplayKycStatus(userKycStatus);\n```\n\nIn this example, we import the `KycStatus` interface and create a `userKycStatus` object that implements the interface. We then define a `displayKycStatus` function that takes a `KycStatus` object as a parameter and logs its properties to the console.\n\n## Conclusion\n\nThe KycStatus.ts file provides a simple and clear interface for representing the KYC status of a user in a financial application. By using this interface, developers can easily manage and display the KYC information of their users, ensuring compliance with industry standards and regulations.",
		"isFolder": false,
		"updated": "2023-04-17T15:07:39.407Z",
		"sidebar_position": 2,
		"sidebar_label": "KycStatus.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\dto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"KycStatus.ts\"\r\nThe file name is: KycStatus.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nexport default interface KycStatus {\r\n    isValidKyc : boolean;\r\n    brokerId : string;\r\n    status : string;\r\n    hasBuyingPower : boolean;\r\n    message : string;\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\dto\\KycStatus.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "dto"
		}
	},
	{
		"name": "OrderDto.ts",
		"path": "src\\dto\\OrderDto.ts",
		"folderPath": "src\\dto",
		"fileContent": "import {OrderSide} from \"./OrderSide\";\r\n\r\nexport default class OrderDto {\r\n    confirmed : boolean = false\r\n    status : string = '';\r\n    walletAddress : string = '';\r\n    chainId: number = 0;\r\n    symbol: string = '';\r\n    side: OrderSide = OrderSide.buy;\r\n    amountWei: string = '';\r\n    amount: number = 0;\r\n    accountId: string = '';\r\n    spender: string = '';\r\n    brokerOrderId: string = '';\r\n    clientOrderId: string = '';\r\n    signMessage: string = '';\r\n    signedMessage: string = '';\r\n    signedTime : string = '';\r\n}",
		"documentation": "# OrderDto.ts\n\nThis is a TypeScript code file that defines the `OrderDto` class. The `OrderDto` class is used to represent an order in a trading system. This class contains various properties related to an order, such as its status, wallet address, chain ID, symbol, side, amount, and other related information.\n\n## Usage\n\nTo use the `OrderDto` class, you can create a new instance of the class and set its properties as needed. Here are some examples of how to use the `OrderDto` class:\n\n```typescript\nimport OrderDto from './OrderDto';\nimport { OrderSide } from './OrderSide';\n\n// Create a new order\nconst order = new OrderDto();\norder.walletAddress = '0x12345...';\norder.chainId = 1;\norder.symbol = 'ETH';\norder.side = OrderSide.buy;\norder.amount = 10;\norder.accountId = '123';\norder.spender = '0x6789...';\norder.brokerOrderId = '456';\norder.clientOrderId = '789';\n```\n\n## Properties\n\nThe `OrderDto` class has the following properties:\n\n### confirmed\n\nA boolean value indicating whether the order has been confirmed or not.\n\n### status\n\nA string representing the current status of the order.\n\n### walletAddress\n\nA string representing the wallet address associated with the order.\n\n### chainId\n\nA number representing the blockchain network ID where the order is placed.\n\n### symbol\n\nA string representing the trading symbol of the asset involved in the order.\n\n### side\n\nAn `OrderSide` enum value representing the side of the order (buy or sell).\n\n### amountWei\n\nA string representing the amount of the asset in the smallest unit (wei) involved in the order.\n\n### amount\n\nA number representing the amount of the asset involved in the order.\n\n### accountId\n\nA string representing the account ID associated with the order.\n\n### spender\n\nA string representing the spender's address in the order.\n\n### brokerOrderId\n\nA string representing the broker's order ID.\n\n### clientOrderId\n\nA string representing the client's order ID.\n\n### signMessage\n\nA string representing the message to be signed for the order.\n\n### signedMessage\n\nA string representing the signed message for the order.\n\n### signedTime\n\nA string representing the timestamp when the order was signed.\n\n## Technical Concepts\n\n### OrderSide Enum\n\nThe `OrderSide` enum is imported from the `OrderSide` module and is used to represent the side of the order (buy or sell). The enum has two values: `OrderSide.buy` and `OrderSide.sell`.",
		"isFolder": false,
		"updated": "2023-04-17T15:09:06.493Z",
		"sidebar_position": 3,
		"sidebar_label": "OrderDto.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\dto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OrderDto.ts\"\r\nThe file name is: OrderDto.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {OrderSide} from \"./OrderSide\";\r\n\r\nexport default class OrderDto {\r\n    confirmed : boolean = false\r\n    status : string = '';\r\n    walletAddress : string = '';\r\n    chainId: number = 0;\r\n    symbol: string = '';\r\n    side: OrderSide = OrderSide.buy;\r\n    amountWei: string = '';\r\n    amount: number = 0;\r\n    accountId: string = '';\r\n    spender: string = '';\r\n    brokerOrderId: string = '';\r\n    clientOrderId: string = '';\r\n    signMessage: string = '';\r\n    signedMessage: string = '';\r\n    signedTime : string = '';\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\dto\\OrderDto.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "dto"
		}
	},
	{
		"name": "OrderExecutedEvent.ts",
		"path": "src\\dto\\OrderExecutedEvent.ts",
		"folderPath": "src\\dto",
		"fileContent": "import {BigNumberish} from \"ethers\";\r\n\r\nexport default interface OrderExecutedEvent {\r\n    recipient: string;\r\n    symbol: string;\r\n    tsl: BigNumberish;\r\n    filledQty: BigNumberish;\r\n    filledAvgPrice: BigNumberish;\r\n    side: string;\r\n    filledAt: BigNumberish;\r\n    totalServiceFee: BigNumberish;\r\n    aUsdBalance: BigNumberish;\r\n    spender: string;\r\n    blockInfo : any\r\n}",
		"documentation": "# OrderExecutedEvent.ts\n\nThis TypeScript file defines an interface called `OrderExecutedEvent`. The interface represents an event that occurs when an order is executed in a trading system. It contains various properties related to the executed order, such as recipient, symbol, tsl, filled quantity, filled average price, side, filled time, total service fee, aUsd balance, spender, and block information.\n\n## Interface Description\n\nThe `OrderExecutedEvent` interface contains the following properties:\n\n- `recipient`: (string) The address of the recipient who receives the executed order.\n- `symbol`: (string) The symbol of the traded asset.\n- `tsl`: (BigNumberish) The time in seconds since the last order execution.\n- `filledQty`: (BigNumberish) The quantity of the asset that was filled in the executed order.\n- `filledAvgPrice`: (BigNumberish) The average price at which the order was filled.\n- `side`: (string) The side of the trade, either \"buy\" or \"sell\".\n- `filledAt`: (BigNumberish) The timestamp when the order was filled.\n- `totalServiceFee`: (BigNumberish) The total service fee charged for the executed order.\n- `aUsdBalance`: (BigNumberish) The balance of the recipient in aUSD (a stablecoin) after the order execution.\n- `spender`: (string) The address of the spender who executed the order.\n- `blockInfo`: (any) Additional information about the block in which the order was executed.\n\n## Usage Example\n\nTo use the `OrderExecutedEvent` interface, you can create an object that implements this interface. Here's an example:\n\n```typescript\nimport { BigNumber } from \"ethers\";\nimport OrderExecutedEvent from \"./OrderExecutedEvent\";\n\nconst orderExecutedEvent: OrderExecutedEvent = {\n  recipient: \"0x123456789abcdef\",\n  symbol: \"ETH\",\n  tsl: BigNumber.from(60),\n  filledQty: BigNumber.from(10),\n  filledAvgPrice: BigNumber.from(2000),\n  side: \"buy\",\n  filledAt: BigNumber.from(Date.now()),\n  totalServiceFee: BigNumber.from(5),\n  aUsdBalance: BigNumber.from(10000),\n  spender: \"0xabcdef123456789\",\n  blockInfo: { blockNumber: 12345, blockHash: \"0xabcdef123456789abcdef\" },\n};\n```\n\nIn this example, we import the `OrderExecutedEvent` interface and create an object that implements it. We use the `BigNumber` type from the `ethers` library for the BigNumberish properties.",
		"isFolder": false,
		"updated": "2023-04-17T15:10:39.595Z",
		"sidebar_position": 4,
		"sidebar_label": "OrderExecutedEvent.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\dto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OrderExecutedEvent.ts\"\r\nThe file name is: OrderExecutedEvent.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {BigNumberish} from \"ethers\";\r\n\r\nexport default interface OrderExecutedEvent {\r\n    recipient: string;\r\n    symbol: string;\r\n    tsl: BigNumberish;\r\n    filledQty: BigNumberish;\r\n    filledAvgPrice: BigNumberish;\r\n    side: string;\r\n    filledAt: BigNumberish;\r\n    totalServiceFee: BigNumberish;\r\n    aUsdBalance: BigNumberish;\r\n    spender: string;\r\n    blockInfo : any\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\dto\\OrderExecutedEvent.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "dto"
		}
	},
	{
		"name": "OrderSide.ts",
		"path": "src\\dto\\OrderSide.ts",
		"folderPath": "src\\dto",
		"fileContent": "export enum OrderSide {\r\n    buy = 'buy',\r\n    sell = 'sell'\r\n}",
		"documentation": "# OrderSide.ts\n\n## Overview\n\nThe `OrderSide.ts` file is a TypeScript code file that exports an enumeration called `OrderSide`. This enumeration represents the two possible sides of an order in a trading system: buy and sell. The `OrderSide` enumeration can be used in various parts of a trading application to ensure that only valid order sides are used.\n\n## Usage\n\nTo use the `OrderSide` enumeration in your TypeScript code, you can import it and then use it as a type for variables or function parameters. Here are some examples of how to use the `OrderSide` enumeration:\n\n### Example 1: Importing and using the OrderSide enumeration\n\n```typescript\nimport { OrderSide } from './OrderSide';\n\nconst orderSide: OrderSide = OrderSide.buy;\n```\n\n### Example 2: Using the OrderSide enumeration in a function\n\n```typescript\nimport { OrderSide } from './OrderSide';\n\nfunction placeOrder(side: OrderSide, quantity: number, price: number) {\n    // Implementation of the placeOrder function\n}\n\nplaceOrder(OrderSide.sell, 100, 50);\n```\n\n## Enumeration Members\n\nThe `OrderSide` enumeration has two members:\n\n### 1. buy\n\nThe `buy` member represents a buy order. It has a string value of `'buy'`.\n\n### 2. sell\n\nThe `sell` member represents a sell order. It has a string value of `'sell'`.\n\n## Technical Concepts\n\nThe `OrderSide` enumeration is a standard TypeScript enumeration. Enumerations in TypeScript are a way to define a set of named constants, which can be used to document the intent of the code and improve readability. Enumerations can be used as types for variables or function parameters, ensuring that only valid values are used.\n\nIn this case, the `OrderSide` enumeration is used to represent the two possible sides of an order in a trading system, making it clear which side of the trade is being referred to and preventing the use of invalid values.\n\n## File Content\n\nThe content of the `OrderSide.ts` file is as follows:\n\n```typescript\nexport enum OrderSide {\n    buy = 'buy',\n    sell = 'sell'\n}\n```",
		"isFolder": false,
		"updated": "2023-04-17T15:11:53.054Z",
		"sidebar_position": 5,
		"sidebar_label": "OrderSide.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\dto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OrderSide.ts\"\r\nThe file name is: OrderSide.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nexport enum OrderSide {\r\n    buy = 'buy',\r\n    sell = 'sell'\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\dto\\OrderSide.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "dto"
		}
	},
	{
		"name": "BlockchainError.ts",
		"path": "src\\error\\BlockchainError.ts",
		"folderPath": "src\\error",
		"fileContent": "\r\nexport default class BlockchainError extends Error {\r\n\r\n    innerError : any;\r\n    constructor(e : any) {\r\n        super();\r\n\r\n        this.name = 'BlockchainError'\r\n        this.stack = e.stack;\r\n        this.message = e.message;\r\n        if (e.error && e.error.reason) {\r\n            this.message = e.error.reason;\r\n        }\r\n        if (this.message.indexOf('reverted with reason') != -1) {\r\n            this.message = this.message.slice(this.message.indexOf(\"'\")).substring(1);\r\n            this.message = this.message.slice(0, this.message.length-1);\r\n        }\r\n        this.innerError = e;\r\n    }\r\n\r\n}",
		"documentation": "# BlockchainError.ts\n\n## Overview\n\nThe `BlockchainError.ts` file contains a custom error class called `BlockchainError` that extends the built-in JavaScript `Error` class. This custom error class is designed to handle errors specifically related to blockchain operations. It provides additional functionality to extract and format error messages from the underlying error object.\n\n## Class: BlockchainError\n\nThe `BlockchainError` class extends the built-in JavaScript `Error` class and adds a new property `innerError` to store the original error object.\n\n### Constructor: BlockchainError(e: any)\n\nThe constructor of the `BlockchainError` class takes a single parameter `e`, which is the original error object. It initializes the `name`, `stack`, and `message` properties of the custom error object and extracts the error reason if available.\n\n#### Parameters\n\n- `e: any`: The original error object that needs to be wrapped by the custom `BlockchainError` class.\n\n### Example\n\n```javascript\nimport BlockchainError from './BlockchainError';\n\ntry {\n  // Some blockchain operation that may throw an error\n} catch (error) {\n  throw new BlockchainError(error);\n}\n```\n\n## Technical Concepts\n\n### Error Handling in JavaScript\n\nError handling in JavaScript is typically done using the `try-catch` statement. When an error occurs within the `try` block, the code execution jumps to the corresponding `catch` block, where the error object can be accessed and processed.\n\n### Custom Error Classes\n\nIn JavaScript, it's common to create custom error classes that extend the built-in `Error` class to handle specific types of errors. This allows for better error handling and more informative error messages.\n\n## Sections\n\n- [Overview](#overview)\n- [Class: BlockchainError](#class-blockchainerror)\n  - [Constructor: BlockchainError(e: any)](#constructor-blockchainerrore-any)\n    - [Parameters](#parameters)\n  - [Example](#example)\n- [Technical Concepts](#technical-concepts)\n  - [Error Handling in JavaScript](#error-handling-in-javascript)\n  - [Custom Error Classes](#custom-error-classes)\n- [Sections](#sections)",
		"isFolder": false,
		"updated": "2023-04-17T15:13:08.738Z",
		"sidebar_position": 0,
		"sidebar_label": "BlockchainError.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\error",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"BlockchainError.ts\"\r\nThe file name is: BlockchainError.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\n\r\nexport default class BlockchainError extends Error {\r\n\r\n    innerError : any;\r\n    constructor(e : any) {\r\n        super();\r\n\r\n        this.name = 'BlockchainError'\r\n        this.stack = e.stack;\r\n        this.message = e.message;\r\n        if (e.error && e.error.reason) {\r\n            this.message = e.error.reason;\r\n        }\r\n        if (this.message.indexOf('reverted with reason') != -1) {\r\n            this.message = this.message.slice(this.message.indexOf(\"'\")).substring(1);\r\n            this.message = this.message.slice(0, this.message.length-1);\r\n        }\r\n        this.innerError = e;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\error\\BlockchainError.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "error"
		}
	},
	{
		"name": "HttpRequest.ts",
		"path": "src\\http\\HttpRequest.ts",
		"folderPath": "src\\http",
		"fileContent": "import LiminalMarket from \"../index\";\r\nimport AccountService from \"../services/AccountService\";\r\n\r\nexport default class HttpRequest {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public async postAuth(path: string, data?: any) {\r\n        if (!LiminalMarket.Bearer) {\r\n            throw new Error('You are not logged in.')\r\n        }\r\n        return await this.post(path, data)\r\n    }\r\n\r\n    public async post(path: string, data?: any) {\r\n        if (!data) {\r\n            data = {}\r\n        }\r\n        data.chainId = LiminalMarket.Network?.ChainId;\r\n        data.address = LiminalMarket.WalletAddress;\r\n        let url = this.getUrl(path);\r\n        let response = await fetch(url,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authentication': 'Bearer: ' + LiminalMarket.Bearer,\r\n                    'Content-Type': 'application/json;charset=UTF-8'\r\n                },\r\n                body: JSON.stringify(data),\r\n            })\r\n        let obj = await response.json();\r\n        if (obj.success) return obj.result;\r\n\r\n        throw new Error(obj.error);\r\n    }\r\n\r\n    public async getAuth(path: string, data?: any): Promise<any> {\r\n        if (!LiminalMarket.Bearer) {\r\n            throw new Error('You are not logged in.')\r\n        }\r\n        return this.get(path, data);\r\n    }\r\n\r\n    public async get(path: string, data?: any): Promise<any> {\r\n        if (!LiminalMarket.Bearer) {\r\n            throw new Error('You are not logged in.')\r\n        }\r\n\r\n        let params = new URLSearchParams(data);\r\n        if (!params.has('chainId')) {\r\n            params.set('chainId', LiminalMarket.Network.ChainId.toString());\r\n        }\r\n        if (!params.has('address')) {\r\n            params.set('address', LiminalMarket.WalletAddress);\r\n        }\r\n\r\n        let response = await fetch(this.getUrl(path) + '?' + params.toString(),\r\n            {\r\n                method: 'GET',\r\n                headers: {'Authentication': 'Bearer: ' + LiminalMarket.Bearer, 'Content-Type': 'application/json'}\r\n            })\r\n        let obj = await response.json();\r\n        return (obj.result) ? obj.result : obj;\r\n    }\r\n\r\n\r\n    private getUrl(path: string) {\r\n        if (path.startsWith('http')) return path;\r\n\r\n        if (!LiminalMarket.Network) {\r\n            throw new Error('No network available. User connected to unsupported network')\r\n        }\r\n        if (!path.startsWith('/')) path = '/' + path;\r\n        return LiminalMarket.Network.ServerUrl + path\r\n    }\r\n\r\n    static eventSource?: EventSource;\r\n    static actionMap: Map<string, (obj : any) => void>;\r\n\r\n    public async listen(method: string, action: (event: any) => Promise<void>) {\r\n        if (!LiminalMarket.Bearer) {\r\n            throw new Error('You are not logged in.')\r\n        }\r\n        if (!HttpRequest.actionMap) {\r\n            HttpRequest.actionMap = new Map<string, () => void>();\r\n        }\r\n        HttpRequest.actionMap.set(method, action);\r\n\r\n        if (!HttpRequest.eventSource) {\r\n            HttpRequest.eventSource = new EventSource(this.getUrl('/listenForChanges?jwt=' + LiminalMarket.Bearer));\r\n            HttpRequest.eventSource.onmessage = async (event: any) => {\r\n                if (event.data == 'ok') return;\r\n                this.runActions(event);\r\n            };\r\n        }\r\n    }\r\n\r\n    private runActions(e: any) {\r\n        let obj = this.getEventSourceObject(e);\r\n\r\n        let action = HttpRequest.actionMap.get(obj.methodName)\r\n        if (action) {\r\n            action(obj);\r\n        }\r\n    }\r\n\r\n    private getEventSourceObject(e: any) {\r\n        let data = e.data;\r\n        if (!data || data == 'ok') return;\r\n\r\n        try {\r\n            return JSON.parse(data);\r\n        } catch (error: any) {\r\n            throw new Error('Error parsing event source object:' + e)\r\n        }\r\n    }\r\n\r\n\r\n}",
		"documentation": "# HttpRequest.ts\n\nHttpRequest.ts is a TypeScript file that provides a class for handling HTTP requests in the LiminalMarket application. This class includes methods for sending authenticated and unauthenticated GET and POST requests, as well as listening for real-time updates using the EventSource API.\n\n## Usage Examples\n\n```javascript\nimport HttpRequest from './HttpRequest';\n\nconst httpRequest = new HttpRequest();\n\n// Sending an authenticated POST request\nhttpRequest.postAuth('/api/endpoint', { key: 'value' })\n    .then(response => console.log(response))\n    .catch(error => console.error(error));\n\n// Sending an unauthenticated GET request\nhttpRequest.get('/api/endpoint')\n    .then(response => console.log(response))\n    .catch(error => console.error(error));\n\n// Listening for real-time updates\nhttpRequest.listen('eventName', async (event) => {\n    console.log('Received event:', event);\n});\n```\n\n## Methods\n\n### postAuth(path: string, data?: any)\n\nSends an authenticated POST request to the specified path with the optional data object. Throws an error if the user is not logged in.\n\n- `path`: The API endpoint to send the request to.\n- `data`: An optional object containing the data to be sent in the request body.\n\n### post(path: string, data?: any)\n\nSends an unauthenticated POST request to the specified path with the optional data object.\n\n- `path`: The API endpoint to send the request to.\n- `data`: An optional object containing the data to be sent in the request body.\n\n### getAuth(path: string, data?: any): Promise<any>\n\nSends an authenticated GET request to the specified path with the optional data object. Throws an error if the user is not logged in.\n\n- `path`: The API endpoint to send the request to.\n- `data`: An optional object containing the data to be sent as query parameters.\n\n### get(path: string, data?: any): Promise<any>\n\nSends an unauthenticated GET request to the specified path with the optional data object.\n\n- `path`: The API endpoint to send the request to.\n- `data`: An optional object containing the data to be sent as query parameters.\n\n### listen(method: string, action: (event: any) => Promise<void>)\n\nListens for real-time updates using the EventSource API. Throws an error if the user is not logged in.\n\n- `method`: The event name to listen for.\n- `action`: A callback function that will be executed when the specified event is received.\n\n## Private Methods\n\n### getUrl(path: string)\n\nReturns the full URL for the specified path, including the server URL from the LiminalMarket.Network configuration.\n\n- `path`: The API endpoint to generate the full URL for.\n\n### runActions(e: any)\n\nRuns the registered action for the specified event.\n\n- `e`: The event object received from the EventSource API.\n\n### getEventSourceObject(e: any)\n\nParses the event data received from the EventSource API and returns the corresponding object.\n\n- `e`: The event object received from the EventSource API.",
		"isFolder": false,
		"updated": "2023-04-17T15:14:51.130Z",
		"sidebar_position": 0,
		"sidebar_label": "HttpRequest.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\http",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"HttpRequest.ts\"\r\nThe file name is: HttpRequest.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport LiminalMarket from \"../index\";\r\nimport AccountService from \"../services/AccountService\";\r\n\r\nexport default class HttpRequest {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public async postAuth(path: string, data?: any) {\r\n        if (!LiminalMarket.Bearer) {\r\n            throw new Error('You are not logged in.')\r\n        }\r\n        return await this.post(path, data)\r\n    }\r\n\r\n    public async post(path: string, data?: any) {\r\n        if (!data) {\r\n            data = {}\r\n        }\r\n        data.chainId = LiminalMarket.Network?.ChainId;\r\n        data.address = LiminalMarket.WalletAddress;\r\n        let url = this.getUrl(path);\r\n        let response = await fetch(url,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authentication': 'Bearer: ' + LiminalMarket.Bearer,\r\n                    'Content-Type': 'application/json;charset=UTF-8'\r\n                },\r\n                body: JSON.stringify(data),\r\n            })\r\n        let obj = await response.json();\r\n        if (obj.success) return obj.result;\r\n\r\n        throw new Error(obj.error);\r\n    }\r\n\r\n    public async getAuth(path: string, data?: any): Promise<any> {\r\n        if (!LiminalMarket.Bearer) {\r\n            throw new Error('You are not logged in.')\r\n        }\r\n        return this.get(path, data);\r\n    }\r\n\r\n    public async get(path: string, data?: any): Promise<any> {\r\n        if (!LiminalMarket.Bearer) {\r\n            throw new Error('You are not logged in.')\r\n        }\r\n\r\n        let params = new URLSearchParams(data);\r\n        if (!params.has('chainId')) {\r\n            params.set('chainId', LiminalMarket.Network.ChainId.toString());\r\n        }\r\n        if (!params.has('address')) {\r\n            params.set('address', LiminalMarket.WalletAddress);\r\n        }\r\n\r\n        let response = await fetch(this.getUrl(path) + '?' + params.toString(),\r\n            {\r\n                method: 'GET',\r\n                headers: {'Authentication': 'Bearer: ' + LiminalMarket.Bearer, 'Content-Type': 'application/json'}\r\n            })\r\n        let obj = await response.json();\r\n        return (obj.result) ? obj.result : obj;\r\n    }\r\n\r\n\r\n    private getUrl(path: string) {\r\n        if (path.startsWith('http')) return path;\r\n\r\n        if (!LiminalMarket.Network) {\r\n            throw new Error('No network available. User connected to unsupported network')\r\n        }\r\n        if (!path.startsWith('/')) path = '/' + path;\r\n        return LiminalMarket.Network.ServerUrl + path\r\n    }\r\n\r\n    static eventSource?: EventSource;\r\n    static actionMap: Map<string, (obj : any) => void>;\r\n\r\n    public async listen(method: string, action: (event: any) => Promise<void>) {\r\n        if (!LiminalMarket.Bearer) {\r\n            throw new Error('You are not logged in.')\r\n        }\r\n        if (!HttpRequest.actionMap) {\r\n            HttpRequest.actionMap = new Map<string, () => void>();\r\n        }\r\n        HttpRequest.actionMap.set(method, action);\r\n\r\n        if (!HttpRequest.eventSource) {\r\n            HttpRequest.eventSource = new EventSource(this.getUrl('/listenForChanges?jwt=' + LiminalMarket.Bearer));\r\n            HttpRequest.eventSource.onmessage = async (event: any) => {\r\n                if (event.data == 'ok') return;\r\n                this.runActions(event);\r\n            };\r\n        }\r\n    }\r\n\r\n    private runActions(e: any) {\r\n        let obj = this.getEventSourceObject(e);\r\n\r\n        let action = HttpRequest.actionMap.get(obj.methodName)\r\n        if (action) {\r\n            action(obj);\r\n        }\r\n    }\r\n\r\n    private getEventSourceObject(e: any) {\r\n        let data = e.data;\r\n        if (!data || data == 'ok') return;\r\n\r\n        try {\r\n            return JSON.parse(data);\r\n        } catch (error: any) {\r\n            throw new Error('Error parsing event source object:' + e)\r\n        }\r\n    }\r\n\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\http\\HttpRequest.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "http"
		}
	},
	{
		"name": "LocalhostNetwork.ts",
		"path": "src\\networks\\LocalhostNetwork.ts",
		"folderPath": "src\\networks",
		"fileContent": "import LocalhostNetworkDefaults from \"./LocalhostNetworkDefaults\";\r\n\r\nexport default class LocalhostNetwork extends LocalhostNetworkDefaults {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    override KYC_ADDRESS = \"0xA700528a2B9Bd3126c96378b76f2c99f5F0e0F76\";\r\n    override AUSD_ADDRESS = \"0x7ad1630b2E9F0e5401f220A33B473C7E5551dd3e\";\r\n    override LIMINAL_MARKET_ADDRESS = \"0x19d5ABE7854b01960D4911e6536b26F8A38C3a18\";\r\n    override MARKET_CALENDAR_ADDRESS = \"0x12bA221061255c11EA4895C363633bD43F28F9c3\";\r\n    override LM_ADDRESS = \"0x012c686711d9532f7fD68fe6a40d86477288F1dc\";\r\n    override SERVICE_CONTRACT_ADDRESS = \"0x9B946889657e8f2D943A3841282fBf5751241E85\";\r\n    override NO_FEE_SERVICE_CONTRACT_ADDRESS = \"0x0d82EF4e843c1ca7bd2aa9B2Aa4239bd70b306df\";\r\n}",
		"documentation": "# LocalhostNetwork.ts\n\nThis is a TypeScript code file that defines a class named `LocalhostNetwork`. The class extends another class called `LocalhostNetworkDefaults`. This class is used to manage and override default network addresses for various contracts in a localhost environment.\n\n## Table of Contents\n\n- [Class Definition](#class-definition)\n- [Examples](#examples)\n- [Methods](#methods)\n- [Properties](#properties)\n\n## Class Definition\n\n```typescript\nexport default class LocalhostNetwork extends LocalhostNetworkDefaults {\n    constructor() {\n        super();\n    }\n}\n```\n\nThe `LocalhostNetwork` class extends the `LocalhostNetworkDefaults` class and has a constructor that calls the parent class's constructor using `super()`.\n\n## Examples\n\nTo use the `LocalhostNetwork` class, you can create an instance of the class and access its properties:\n\n```typescript\nimport LocalhostNetwork from \"./LocalhostNetwork\";\n\nconst localhostNetwork = new LocalhostNetwork();\n\nconsole.log(localhostNetwork.KYC_ADDRESS);\nconsole.log(localhostNetwork.AUSD_ADDRESS);\n```\n\n## Methods\n\nThere are no methods defined in the `LocalhostNetwork` class.\n\n## Properties\n\nThe `LocalhostNetwork` class has the following properties, which are used to override the default network addresses for various contracts:\n\n- `KYC_ADDRESS`: The address of the KYC contract. Default value: `\"0xA700528a2B9Bd3126c96378b76f2c99f5F0e0F76\"`\n- `AUSD_ADDRESS`: The address of the AUSD contract. Default value: `\"0x7ad1630b2E9F0e5401f220A33B473C7E5551dd3e\"`\n- `LIMINAL_MARKET_ADDRESS`: The address of the Liminal Market contract. Default value: `\"0x19d5ABE7854b01960D4911e6536b26F8A38C3a18\"`\n- `MARKET_CALENDAR_ADDRESS`: The address of the Market Calendar contract. Default value: `\"0x12bA221061255c11EA4895C363633bD43F28F9c3\"`\n- `LM_ADDRESS`: The address of the LM contract. Default value: `\"0x012c686711d9532f7fD68fe6a40d86477288F1dc\"`\n- `SERVICE_CONTRACT_ADDRESS`: The address of the Service Contract. Default value: `\"0x9B946889657e8f2D943A3841282fBf5751241E85\"`\n- `NO_FEE_SERVICE_CONTRACT_ADDRESS`: The address of the No Fee Service Contract. Default value: `\"0x0d82EF4e843c1ca7bd2aa9B2Aa4239bd70b306df\"`\n\nEach property is marked with the `override` keyword, indicating that it overrides the corresponding property in the parent class `LocalhostNetworkDefaults`.",
		"isFolder": false,
		"updated": "2023-04-17T15:16:39.360Z",
		"sidebar_position": 0,
		"sidebar_label": "LocalhostNetwork.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\networks",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"LocalhostNetwork.ts\"\r\nThe file name is: LocalhostNetwork.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport LocalhostNetworkDefaults from \"./LocalhostNetworkDefaults\";\r\n\r\nexport default class LocalhostNetwork extends LocalhostNetworkDefaults {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    override KYC_ADDRESS = \"0xA700528a2B9Bd3126c96378b76f2c99f5F0e0F76\";\r\n    override AUSD_ADDRESS = \"0x7ad1630b2E9F0e5401f220A33B473C7E5551dd3e\";\r\n    override LIMINAL_MARKET_ADDRESS = \"0x19d5ABE7854b01960D4911e6536b26F8A38C3a18\";\r\n    override MARKET_CALENDAR_ADDRESS = \"0x12bA221061255c11EA4895C363633bD43F28F9c3\";\r\n    override LM_ADDRESS = \"0x012c686711d9532f7fD68fe6a40d86477288F1dc\";\r\n    override SERVICE_CONTRACT_ADDRESS = \"0x9B946889657e8f2D943A3841282fBf5751241E85\";\r\n    override NO_FEE_SERVICE_CONTRACT_ADDRESS = \"0x0d82EF4e843c1ca7bd2aa9B2Aa4239bd70b306df\";\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\networks\\LocalhostNetwork.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "networks"
		}
	},
	{
		"name": "LocalhostNetworkDefaults.ts",
		"path": "src\\networks\\LocalhostNetworkDefaults.ts",
		"folderPath": "src\\networks",
		"fileContent": "import TestNetwork from \"./TestNetwork\";\r\n//localhost\r\nexport default abstract class LocalhostNetworkDefaults extends TestNetwork {\r\n    protected constructor() {\r\n        super();\r\n\r\n        this.ChainId = LocalhostNetworkDefaults.ChainId;\r\n        this.Name = \"localhost\";\r\n        this.ChainName = 'localhost test';\r\n        this.NativeCurrencyName = \"Ethereum\";\r\n        this.NativeSymbol = \"ETH\";\r\n        this.NativeDecimal = 18;\r\n        this.RpcUrl = LocalhostNetworkDefaults.RpcUrl;\r\n        this.BlockExplorer = 'https://rinkeby.etherscan.io';\r\n        this.ServerUrl = \"http://127.0.0.1:10000\";\r\n\t}\r\n    static override RpcUrl = 'http://127.0.0.1:8545/';\r\n\r\n    static override ChainId = 31337;\r\n\r\n}\r\n\r\n",
		"documentation": "# LocalhostNetworkDefaults.ts\n\nThis TypeScript file defines the `LocalhostNetworkDefaults` class, which is an abstract class that extends the `TestNetwork` class. The purpose of this class is to provide default configurations for a localhost test network, such as chain ID, name, native currency, and RPC URL.\n\n## Table of Contents\n\n- [Class Description](#class-description)\n- [Examples](#examples)\n- [Methods](#methods)\n  - [constructor](#constructor)\n- [Properties](#properties)\n  - [ChainId](#chainid)\n  - [RpcUrl](#rpcurl)\n- [Technical Concepts](#technical-concepts)\n\n## Class Description\n\nThe `LocalhostNetworkDefaults` class is an abstract class that inherits from the `TestNetwork` class. It provides default configurations for a localhost test network, such as chain ID, name, native currency, and RPC URL. This class is useful when setting up a local test environment for Ethereum-based applications.\n\n## Examples\n\nTo use the `LocalhostNetworkDefaults` class, you would typically extend it in your own class:\n\n```typescript\nimport LocalhostNetworkDefaults from \"./LocalhostNetworkDefaults\";\n\nclass MyLocalhostNetwork extends LocalhostNetworkDefaults {\n  // Your custom implementation here\n}\n```\n\n## Methods\n\n### constructor\n\nThe `constructor` method is a protected method that initializes the `LocalhostNetworkDefaults` class with default values for the localhost test network.\n\n#### Parameters\n\n_None_\n\n## Properties\n\n### ChainId\n\nThe `ChainId` property is a static property that represents the default chain ID for the localhost test network. The default value is `31337`.\n\n### RpcUrl\n\nThe `RpcUrl` property is a static property that represents the default RPC URL for the localhost test network. The default value is `'http://127.0.0.1:8545/'`.\n\n## Technical Concepts\n\n- **Abstract Class**: An abstract class is a class that cannot be instantiated directly. Instead, it serves as a base class for other classes to inherit from. In this case, `LocalhostNetworkDefaults` is an abstract class that extends the `TestNetwork` class.\n- **localhost**: In the context of this file, localhost refers to a local test environment for Ethereum-based applications. It is a network that runs on the user's own computer, allowing developers to test their applications without connecting to a public network.\n- **RPC URL**: The Remote Procedure Call (RPC) URL is the address used to communicate with the Ethereum node. In this case, the default RPC URL is set to `'http://127.0.0.1:8545/'`, which points to a local Ethereum node running on the user's computer.",
		"isFolder": false,
		"updated": "2023-04-17T16:12:38.360Z",
		"sidebar_position": 1,
		"sidebar_label": "LocalhostNetworkDefaults.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\networks",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"LocalhostNetworkDefaults.ts\"\r\nThe file name is: LocalhostNetworkDefaults.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport TestNetwork from \"./TestNetwork\";\r\n//localhost\r\nexport default abstract class LocalhostNetworkDefaults extends TestNetwork {\r\n    protected constructor() {\r\n        super();\r\n\r\n        this.ChainId = LocalhostNetworkDefaults.ChainId;\r\n        this.Name = \"localhost\";\r\n        this.ChainName = 'localhost test';\r\n        this.NativeCurrencyName = \"Ethereum\";\r\n        this.NativeSymbol = \"ETH\";\r\n        this.NativeDecimal = 18;\r\n        this.RpcUrl = LocalhostNetworkDefaults.RpcUrl;\r\n        this.BlockExplorer = 'https://rinkeby.etherscan.io';\r\n        this.ServerUrl = \"http://127.0.0.1:10000\";\r\n\t}\r\n    static override RpcUrl = 'http://127.0.0.1:8545/';\r\n\r\n    static override ChainId = 31337;\r\n\r\n}\r\n\r\n\r\n###\r\n"
			}
		],
		"id": "src\\networks\\LocalhostNetworkDefaults.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "networks"
		}
	},
	{
		"name": "MainNetwork.ts",
		"path": "src\\networks\\MainNetwork.ts",
		"folderPath": "src\\networks",
		"fileContent": "import Network from \"./Network\";\r\n\r\nexport default abstract class MainNetwork extends Network {\r\n\r\n    protected constructor() {\r\n        super();\r\n\r\n        this.ServerUrl = \"https://mainnet.liminal.market\";\r\n        this.TestNetwork = false;\r\n    }\r\n}",
		"documentation": "# MainNetwork.ts\n\nThe `MainNetwork.ts` file is a TypeScript code file that defines an abstract class `MainNetwork` which extends the `Network` class. This class is responsible for setting up the main network configuration for the application.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Usage](#usage)\n- [Methods](#methods)\n  - [constructor](#constructor)\n- [Technical Concepts](#technical-concepts)\n\n## Overview\n\nThe `MainNetwork` class is an abstract class that extends the `Network` class. It is used to set up the main network configuration for the application, including the server URL and the test network flag.\n\n## Usage\n\nTo use the `MainNetwork` class, you need to create a new class that extends it and implement the required methods. Here's an example:\n\n```typescript\nimport MainNetwork from \"./MainNetwork\";\n\nclass MyNetwork extends MainNetwork {\n  // Implement required methods here\n}\n\nconst myNetwork = new MyNetwork();\n```\n\n## Methods\n\n### constructor\n\nThe `constructor` method is a protected method that initializes the `MainNetwork` class. It sets the `ServerUrl` property to the main network server URL and the `TestNetwork` property to `false`.\n\n#### Parameters\n\nNone.\n\n## Technical Concepts\n\n- **Abstract Class**: An abstract class is a class that cannot be instantiated directly. Instead, it serves as a base class for other classes that can be instantiated. In this case, the `MainNetwork` class is an abstract class that extends the `Network` class, and it must be extended by another class to be used.\n\n- **TypeScript**: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. It adds optional static types to the language, which can help with code quality and maintainability. The `MainNetwork.ts` file is written in TypeScript, and it uses features like classes, inheritance, and abstract classes that are not available in standard JavaScript.\n\n- **ServerUrl**: The `ServerUrl` property is a string that represents the URL of the main network server. In this case, it is set to \"https://mainnet.liminal.market\".\n\n- **TestNetwork**: The `TestNetwork` property is a boolean that indicates whether the network is a test network or not. In this case, it is set to `false`, meaning that the `MainNetwork` class is intended for use with the main network, not a test network.",
		"isFolder": false,
		"updated": "2023-04-17T15:20:03.840Z",
		"sidebar_position": 2,
		"sidebar_label": "MainNetwork.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\networks",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"MainNetwork.ts\"\r\nThe file name is: MainNetwork.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Network from \"./Network\";\r\n\r\nexport default abstract class MainNetwork extends Network {\r\n\r\n    protected constructor() {\r\n        super();\r\n\r\n        this.ServerUrl = \"https://mainnet.liminal.market\";\r\n        this.TestNetwork = false;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\networks\\MainNetwork.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "networks"
		}
	},
	{
		"name": "MumbaiNetwork.ts",
		"path": "src\\networks\\MumbaiNetwork.ts",
		"folderPath": "src\\networks",
		"fileContent": "import MumbaiNetworkDefaults from \"./MumbaiNetworkDefaults\";\r\n\r\nexport default class MumbaiNetwork extends MumbaiNetworkDefaults {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    override KYC_ADDRESS = \"0xA5C844558a93590A32D1110D7031531A0bBf0773\";\r\n    override AUSD_ADDRESS = \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\";\r\n    override LIMINAL_MARKET_ADDRESS = \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\";\r\n    override MARKET_CALENDAR_ADDRESS = \"0x67Dad7E344C6137DF922924a0aAb26bba862BFDe\";\r\n    override LM_ADDRESS = \"0x808C2F1bBE4C7fE72F77e84F57C346603E63291e\";\r\n    override SERVICE_CONTRACT_ADDRESS = \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\";\r\n    override NO_FEE_SERVICE_CONTRACT_ADDRESS = \"0x3BBc034e9dC74749000fE384eD504E7d58281065\";\r\n}",
		"documentation": "# MumbaiNetwork.ts\n\nThis is a TypeScript code file that defines a class named `MumbaiNetwork` which extends the `MumbaiNetworkDefaults` class. The `MumbaiNetwork` class is used to manage the addresses of various contracts on the Mumbai test network.\n\n## Table of Contents\n\n- [Class Definition](#class-definition)\n- [Constructor](#constructor)\n- [Properties](#properties)\n\n## Class Definition\n\n```typescript\nexport default class MumbaiNetwork extends MumbaiNetworkDefaults {\n    ...\n}\n```\n\nThe `MumbaiNetwork` class extends the `MumbaiNetworkDefaults` class, which means it inherits all the properties and methods from the parent class. This class is exported as the default export of the module.\n\n## Constructor\n\n```typescript\nconstructor() {\n    super();\n}\n```\n\nThe constructor of the `MumbaiNetwork` class calls the constructor of the parent class `MumbaiNetworkDefaults` using the `super()` method.\n\n## Properties\n\nThe `MumbaiNetwork` class overrides several properties from the parent class. These properties represent the addresses of various contracts on the Mumbai test network.\n\n- `KYC_ADDRESS`: The address of the KYC contract.\n- `AUSD_ADDRESS`: The address of the AUSD contract.\n- `LIMINAL_MARKET_ADDRESS`: The address of the Liminal Market contract.\n- `MARKET_CALENDAR_ADDRESS`: The address of the Market Calendar contract.\n- `LM_ADDRESS`: The address of the LM contract.\n- `SERVICE_CONTRACT_ADDRESS`: The address of the Service Contract.\n- `NO_FEE_SERVICE_CONTRACT_ADDRESS`: The address of the No Fee Service Contract.\n\n```typescript\noverride KYC_ADDRESS = \"0xA5C844558a93590A32D1110D7031531A0bBf0773\";\noverride AUSD_ADDRESS = \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\";\noverride LIMINAL_MARKET_ADDRESS = \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\";\noverride MARKET_CALENDAR_ADDRESS = \"0x67Dad7E344C6137DF922924a0aAb26bba862BFDe\";\noverride LM_ADDRESS = \"0x808C2F1bBE4C7fE72F77e84F57C346603E63291e\";\noverride SERVICE_CONTRACT_ADDRESS = \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\";\noverride NO_FEE_SERVICE_CONTRACT_ADDRESS = \"0x3BBc034e9dC74749000fE384eD504E7d58281065\";\n```\n\nThese properties can be accessed and used in other parts of the application to interact with the respective contracts on the Mumbai test network.",
		"isFolder": false,
		"updated": "2023-04-17T15:21:47.926Z",
		"sidebar_position": 3,
		"sidebar_label": "MumbaiNetwork.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\networks",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"MumbaiNetwork.ts\"\r\nThe file name is: MumbaiNetwork.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport MumbaiNetworkDefaults from \"./MumbaiNetworkDefaults\";\r\n\r\nexport default class MumbaiNetwork extends MumbaiNetworkDefaults {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    override KYC_ADDRESS = \"0xA5C844558a93590A32D1110D7031531A0bBf0773\";\r\n    override AUSD_ADDRESS = \"0xc4d1f8D35DB0f0d3E91a3fc8485792F4Df60C387\";\r\n    override LIMINAL_MARKET_ADDRESS = \"0x0D8c3D4F4B29EfC3c54172803dA8a7f1CA2E6189\";\r\n    override MARKET_CALENDAR_ADDRESS = \"0x67Dad7E344C6137DF922924a0aAb26bba862BFDe\";\r\n    override LM_ADDRESS = \"0x808C2F1bBE4C7fE72F77e84F57C346603E63291e\";\r\n    override SERVICE_CONTRACT_ADDRESS = \"0x0827C71852ba59661aAd9f1fab25B377B3f39C40\";\r\n    override NO_FEE_SERVICE_CONTRACT_ADDRESS = \"0x3BBc034e9dC74749000fE384eD504E7d58281065\";\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\networks\\MumbaiNetwork.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "networks"
		}
	},
	{
		"name": "MumbaiNetworkDefaults.ts",
		"path": "src\\networks\\MumbaiNetworkDefaults.ts",
		"folderPath": "src\\networks",
		"fileContent": "import TestNetwork from \"./TestNetwork\";\r\n\r\nexport default  abstract class MumbaiNetworkDefaults extends TestNetwork {\r\n    protected constructor() {\r\n        super();\r\n\r\n        this.Name = \"mumbai\";\r\n        this.ChainName = 'Polygon Mumbai';\r\n        this.NativeCurrencyName = \"Matic\";\r\n        this.NativeSymbol = \"MATIC\";\r\n        this.NativeDecimal = 18;\r\n        this.BlockExplorer = 'https://mumbai.polygonscan.com/';\r\n        this.FaucetUrl = 'https://faucet.polygon.technology/';\r\n        this.BuyUrl = 'https://www.moonpay.com/buy/matic';\r\n\r\n        this.ChainId = MumbaiNetworkDefaults.ChainId;\r\n        this.RpcUrl = MumbaiNetworkDefaults.RpcUrl;\r\n    }\r\n\r\n    static override RpcUrl = 'https://polygon-mumbai.g.alchemy.com/v2/FILTBk8FT9RzcRVxkMXIg7Ipl8JCNdK2';\r\n    static override ChainId = 80001;\r\n}\r\n\r\n",
		"documentation": "# MumbaiNetworkDefaults.ts\n\nThis is a TypeScript code file that defines the `MumbaiNetworkDefaults` class, which extends the `TestNetwork` class. The `MumbaiNetworkDefaults` class provides default configurations and settings for the Mumbai test network on the Polygon blockchain.\n\n## Table of Contents\n\n- [Class Description](#class-description)\n- [Usage Examples](#usage-examples)\n- [Methods](#methods)\n  - [constructor](#constructor)\n- [Properties](#properties)\n  - [RpcUrl](#rpcurl)\n  - [ChainId](#chainid)\n\n## Class Description\n\nThe `MumbaiNetworkDefaults` class is an abstract class that extends the `TestNetwork` class. It sets up the default configurations for the Mumbai test network, such as the network name, chain name, native currency name, native symbol, native decimal, block explorer URL, faucet URL, buy URL, chain ID, and RPC URL.\n\n## Usage Examples\n\nTo use the `MumbaiNetworkDefaults` class, you can create a new class that extends it and then instantiate the new class. Here's an example:\n\n```typescript\nimport MumbaiNetworkDefaults from \"./MumbaiNetworkDefaults\";\n\nclass MyMumbaiNetwork extends MumbaiNetworkDefaults {\n  // Add custom methods or properties here\n}\n\nconst myMumbaiNetwork = new MyMumbaiNetwork();\n```\n\n## Methods\n\n### constructor\n\nThe `constructor` method is a protected method that initializes the `MumbaiNetworkDefaults` class. It sets the default values for the Mumbai test network properties.\n\n#### Parameters\n\nNone.\n\n## Properties\n\n### RpcUrl\n\nThe `RpcUrl` property is a static property that holds the default RPC URL for the Mumbai test network. The value is set to `'https://polygon-mumbai.g.alchemy.com/v2/*****'`.\n\n### ChainId\n\nThe `ChainId` property is a static property that holds the default chain ID for the Mumbai test network. The value is set to `80001`.",
		"isFolder": false,
		"updated": "2023-04-17T15:22:59.253Z",
		"sidebar_position": 4,
		"sidebar_label": "MumbaiNetworkDefaults.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\networks",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"MumbaiNetworkDefaults.ts\"\r\nThe file name is: MumbaiNetworkDefaults.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport TestNetwork from \"./TestNetwork\";\r\n\r\nexport default  abstract class MumbaiNetworkDefaults extends TestNetwork {\r\n    protected constructor() {\r\n        super();\r\n\r\n        this.Name = \"mumbai\";\r\n        this.ChainName = 'Polygon Mumbai';\r\n        this.NativeCurrencyName = \"Matic\";\r\n        this.NativeSymbol = \"MATIC\";\r\n        this.NativeDecimal = 18;\r\n        this.BlockExplorer = 'https://mumbai.polygonscan.com/';\r\n        this.FaucetUrl = 'https://faucet.polygon.technology/';\r\n        this.BuyUrl = 'https://www.moonpay.com/buy/matic';\r\n\r\n        this.ChainId = MumbaiNetworkDefaults.ChainId;\r\n        this.RpcUrl = MumbaiNetworkDefaults.RpcUrl;\r\n    }\r\n\r\n    static override RpcUrl = 'https://polygon-mumbai.g.alchemy.com/v2/FILTBk8FT9RzcRVxkMXIg7Ipl8JCNdK2';\r\n    static override ChainId = 80001;\r\n}\r\n\r\n\r\n###\r\n"
			}
		],
		"id": "src\\networks\\MumbaiNetworkDefaults.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "networks"
		}
	},
	{
		"name": "Network.ts",
		"path": "src\\networks\\Network.ts",
		"folderPath": "src\\networks",
		"fileContent": "export default abstract class Network {\r\n    ServerUrl = \"\";\r\n    ChainId = 0;\r\n    Name = \"\";\r\n    ChainName = '';\r\n    NativeCurrencyName = \"\";\r\n    NativeSymbol = \"\";\r\n    NativeDecimal = 18;\r\n    RpcUrl = '';\r\n    BlockExplorer = '';\r\n    TestNetwork = true;\r\n    FaucetUrl = '';\r\n    BuyUrl = '';\r\n    KYC_ADDRESS = \"\";\r\n    AUSD_ADDRESS = \"\";\r\n    LIMINAL_MARKET_ADDRESS = \"\";\r\n    MARKET_CALENDAR_ADDRESS = \"\";\r\n    LM_ADDRESS = '';\r\n    SERVICE_CONTRACT_ADDRESS = '';\r\n    NO_FEE_SERVICE_CONTRACT_ADDRESS = \"0x0d82EF4e843c1ca7bd2aa9B2Aa4239bd70b306df\";\r\n\r\n\r\n    static RpcUrl = '';\r\n    static ChainId = 0;\r\n\r\n    protected constructor() {\r\n    }\r\n\r\n    public get ChainIdHex() {\r\n        return '0x' + this.ChainId.toString(16)\r\n    }\r\n\r\n}",
		"documentation": "# Network.ts\n\nThis is a TypeScript code file that defines an abstract class `Network`. The `Network` class serves as a base class for different blockchain networks, providing essential properties and methods for interacting with them.\n\n## Class Description\n\nThe `Network` class contains properties such as server URL, chain ID, network name, native currency details, and various contract addresses. It also includes a method to get the hexadecimal representation of the chain ID.\n\n## Usage Examples\n\nTo use this class, you can create a new class that extends the `Network` class and provide the necessary details for the specific network.\n\n```typescript\nclass ExampleNetwork extends Network {\n  constructor() {\n    super();\n    this.ServerUrl = \"https://example.com\";\n    this.ChainId = 1;\n    this.Name = \"Example Network\";\n    // ... other properties\n  }\n}\n```\n\nThen, you can create an instance of the `ExampleNetwork` class and access its properties and methods:\n\n```typescript\nconst exampleNetwork = new ExampleNetwork();\nconsole.log(exampleNetwork.ChainIdHex); // Output: 0x1\n```\n\n## Methods\n\n### ChainIdHex\n\n- Description: This getter method returns the hexadecimal representation of the chain ID.\n- Parameters: None\n- Returns: A string representing the hexadecimal value of the chain ID.\n\n## Properties\n\n- ServerUrl: The server URL for the network.\n- ChainId: The chain ID of the network.\n- Name: The name of the network.\n- ChainName: The name of the blockchain.\n- NativeCurrencyName: The name of the native currency.\n- NativeSymbol: The symbol of the native currency.\n- NativeDecimal: The number of decimals for the native currency.\n- RpcUrl: The URL for the RPC endpoint.\n- BlockExplorer: The URL for the block explorer.\n- TestNetwork: A boolean indicating if the network is a test network.\n- FaucetUrl: The URL for the faucet.\n- BuyUrl: The URL for purchasing the native currency.\n- KYC_ADDRESS: The address of the KYC contract.\n- AUSD_ADDRESS: The address of the AUSD contract.\n- LIMINAL_MARKET_ADDRESS: The address of the Liminal Market contract.\n- MARKET_CALENDAR_ADDRESS: The address of the Market Calendar contract.\n- LM_ADDRESS: The address of the LM contract.\n- SERVICE_CONTRACT_ADDRESS: The address of the Service contract.\n- NO_FEE_SERVICE_CONTRACT_ADDRESS: The address of the No Fee Service contract (default: \"0x0d82EF4e843c1ca7bd2aa9B2Aa4239bd70b306df\").\n\n## Static Properties\n\n- RpcUrl: The static URL for the RPC endpoint.\n- ChainId: The static chain ID of the network.\n\n## Constructor\n\nThe constructor is protected, which means it can only be called from within the class or its subclasses. This is to ensure that the `Network` class is only used as a base class and not instantiated directly.",
		"isFolder": false,
		"updated": "2023-04-17T15:24:41.115Z",
		"sidebar_position": 5,
		"sidebar_label": "Network.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\networks",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"Network.ts\"\r\nThe file name is: Network.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nexport default abstract class Network {\r\n    ServerUrl = \"\";\r\n    ChainId = 0;\r\n    Name = \"\";\r\n    ChainName = '';\r\n    NativeCurrencyName = \"\";\r\n    NativeSymbol = \"\";\r\n    NativeDecimal = 18;\r\n    RpcUrl = '';\r\n    BlockExplorer = '';\r\n    TestNetwork = true;\r\n    FaucetUrl = '';\r\n    BuyUrl = '';\r\n    KYC_ADDRESS = \"\";\r\n    AUSD_ADDRESS = \"\";\r\n    LIMINAL_MARKET_ADDRESS = \"\";\r\n    MARKET_CALENDAR_ADDRESS = \"\";\r\n    LM_ADDRESS = '';\r\n    SERVICE_CONTRACT_ADDRESS = '';\r\n    NO_FEE_SERVICE_CONTRACT_ADDRESS = \"0x0d82EF4e843c1ca7bd2aa9B2Aa4239bd70b306df\";\r\n\r\n\r\n    static RpcUrl = '';\r\n    static ChainId = 0;\r\n\r\n    protected constructor() {\r\n    }\r\n\r\n    public get ChainIdHex() {\r\n        return '0x' + this.ChainId.toString(16)\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\networks\\Network.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "networks"
		}
	},
	{
		"name": "NetworkType.ts",
		"path": "src\\networks\\NetworkType.ts",
		"folderPath": "src\\networks",
		"fileContent": "import Network from \"./Network\";\r\nimport LocalhostNetwork from \"./LocalhostNetwork\";\r\nimport MumbaiNetwork from \"./MumbaiNetwork\";\r\n\r\nexport default class NetworkType {\r\n    static Networks : any = [LocalhostNetwork, MumbaiNetwork];\r\n\r\n    public static getInstance(chainId : any) : Network | undefined {\r\n        let networkInfo: Network | undefined = undefined;\r\n\r\n        NetworkType.Networks.forEach((networkInfoType : any) => {\r\n            let tmp = new networkInfoType();\r\n            if (tmp.ChainId == chainId) {\r\n                networkInfo = tmp;\r\n            }\r\n        });\r\n        return networkInfo;\r\n    }\r\n\r\n}",
		"documentation": "# NetworkType.ts\n\nThis is a TypeScript code file that defines a `NetworkType` class. The class is responsible for managing different network types and providing instances of the appropriate network based on the provided chain ID.\n\n## Table of Contents\n\n- [Imported Modules](#imported-modules)\n- [NetworkType Class](#networktype-class)\n  - [Properties](#properties)\n  - [Methods](#methods)\n    - [getInstance](#getinstance)\n- [Examples](#examples)\n\n## Imported Modules\n\nThe following modules are imported in the `NetworkType.ts` file:\n\n- `Network`: A base class for different network types.\n- `LocalhostNetwork`: A class representing the localhost network.\n- `MumbaiNetwork`: A class representing the Mumbai network.\n\n## NetworkType Class\n\nThe `NetworkType` class is responsible for managing different network types and providing instances of the appropriate network based on the provided chain ID.\n\n### Properties\n\n- `Networks`: A static property that holds an array of available network types. Currently, it includes `LocalhostNetwork` and `MumbaiNetwork`.\n\n### Methods\n\n#### getInstance\n\nThe `getInstance` method is a static method that takes a `chainId` as a parameter and returns an instance of the appropriate network type based on the provided chain ID.\n\n- Parameters:\n  - `chainId`: The chain ID for which the network instance is required.\n\n- Returns: An instance of the appropriate `Network` type based on the provided chain ID, or `undefined` if no matching network type is found.\n\n## Examples\n\nHere's an example of how to use the `NetworkType` class to get an instance of a network based on a chain ID:\n\n```typescript\nimport NetworkType from \"./NetworkType\";\n\nconst chainId = 80001; // Mumbai network chain ID\nconst networkInstance = NetworkType.getInstance(chainId);\n\nif (networkInstance) {\n  console.log(`Network instance: ${networkInstance}`);\n} else {\n  console.log(\"No matching network found for the provided chain ID.\");\n}\n```\n\nIn this example, the `NetworkType.getInstance()` method is called with the Mumbai network's chain ID (80001). The method returns an instance of the `MumbaiNetwork` class, which is then logged to the console. If no matching network type is found for the provided chain ID, the console will display a message indicating that no matching network was found.",
		"isFolder": false,
		"updated": "2023-04-17T15:26:11.012Z",
		"sidebar_position": 6,
		"sidebar_label": "NetworkType.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\networks",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"NetworkType.ts\"\r\nThe file name is: NetworkType.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Network from \"./Network\";\r\nimport LocalhostNetwork from \"./LocalhostNetwork\";\r\nimport MumbaiNetwork from \"./MumbaiNetwork\";\r\n\r\nexport default class NetworkType {\r\n    static Networks : any = [LocalhostNetwork, MumbaiNetwork];\r\n\r\n    public static getInstance(chainId : any) : Network | undefined {\r\n        let networkInfo: Network | undefined = undefined;\r\n\r\n        NetworkType.Networks.forEach((networkInfoType : any) => {\r\n            let tmp = new networkInfoType();\r\n            if (tmp.ChainId == chainId) {\r\n                networkInfo = tmp;\r\n            }\r\n        });\r\n        return networkInfo;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\networks\\NetworkType.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "networks"
		}
	},
	{
		"name": "TestNetwork.ts",
		"path": "src\\networks\\TestNetwork.ts",
		"folderPath": "src\\networks",
		"fileContent": "import Network from \"./Network\";\r\n\r\nexport default  abstract class TestNetwork extends Network {\r\n\r\n    protected constructor() {\r\n        super();\r\n\r\n        this.ServerUrl = \"https://testnet.liminal.market\";\r\n        this.TestNetwork = true;\r\n    }\r\n}",
		"documentation": "# TestNetwork.ts\n\nThis is a TypeScript code file that defines an abstract class `TestNetwork` which extends the `Network` class. The purpose of this class is to provide a base implementation for test networks, with a predefined server URL and a flag indicating that it is a test network.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Usage](#usage)\n- [Methods](#methods)\n  - [constructor](#constructor)\n- [Technical Concepts](#technical-concepts)\n\n## Overview\n\nThe `TestNetwork` class is an abstract class that inherits from the `Network` class. It is designed to be extended by other classes that represent specific test networks. The class sets the `ServerUrl` property to a predefined test network URL and sets the `TestNetwork` flag to `true`.\n\n## Usage\n\nTo use the `TestNetwork` class, you need to create a new class that extends it. Here's an example:\n\n```typescript\nimport TestNetwork from \"./TestNetwork\";\n\nclass MyTestNetwork extends TestNetwork {\n  // Add custom implementation here\n}\n\nconst myTestNetwork = new MyTestNetwork();\n```\n\n## Methods\n\n### constructor\n\nThe `constructor` method is a protected method that initializes the `TestNetwork` class. It sets the `ServerUrl` property to the test network URL and the `TestNetwork` flag to `true`.\n\n#### Parameters\n\nThere are no parameters for this method.\n\n## Technical Concepts\n\n- **Abstract Class**: An abstract class is a class that cannot be instantiated directly. Instead, it is meant to be extended by other classes. In this case, the `TestNetwork` class is an abstract class that should be extended by other classes representing specific test networks.\n- **Inheritance**: The `TestNetwork` class extends the `Network` class, which means it inherits all the properties and methods of the `Network` class. This allows the `TestNetwork` class to reuse the functionality provided by the `Network` class while adding or modifying specific behavior for test networks.",
		"isFolder": false,
		"updated": "2023-04-17T15:27:19.829Z",
		"sidebar_position": 7,
		"sidebar_label": "TestNetwork.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\networks",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"TestNetwork.ts\"\r\nThe file name is: TestNetwork.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Network from \"./Network\";\r\n\r\nexport default  abstract class TestNetwork extends Network {\r\n\r\n    protected constructor() {\r\n        super();\r\n\r\n        this.ServerUrl = \"https://testnet.liminal.market\";\r\n        this.TestNetwork = true;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\networks\\TestNetwork.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "networks"
		}
	},
	{
		"name": "AccountService.ts",
		"path": "src\\services\\AccountService.ts",
		"folderPath": "src\\services",
		"fileContent": "import KycStatus from \"../dto/KycStatus\";\r\nimport HttpRequest from \"../http/HttpRequest\";\r\nimport {Account} from \"../dto/Account\";\r\nimport LiminalMarket from \"../index\";\r\nimport Helper from \"../Helper\";\r\n\r\nexport default class AccountService {\r\n    private signInMessage = \"You are logging into Liminal.market.\\n\\nNonce:\";\r\n    httpRequest: HttpRequest;\r\n\r\n    constructor() {\r\n        this.httpRequest = new HttpRequest();\r\n    }\r\n\r\n    public async kycStatus(): Promise<KycStatus> {\r\n        let result = (await this.httpRequest.getAuth(\"isValidKyc\")) as KycStatus;\r\n        if (!result.isValidKyc && result.status == 'ACTIVE') {\r\n            result.message = 'Kyc status is being written down on blockchain. This can take few minutes. Ask again in few minutes'\r\n        } else if (result.isValidKyc) {\r\n            result.message = 'This account can execute trades';\r\n        } else if (!result.isValidKyc) {\r\n            result.message = 'KYC for this account has not been approved. Current status is ' + result.status;\r\n        }\r\n        if ((result as any).alpacaId) {\r\n            result.brokerId = (result as any).alpacaId;\r\n            delete (result as any).alpacaId;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public async login(): Promise<Account> {\r\n        let account = await this.autoLogin();\r\n        if (account) return account;\r\n\r\n        let response = await this.httpRequest.post('/me/nonce', {address: LiminalMarket.WalletAddress});\r\n        let signingMessage = this.signInMessage + response.nonce;\r\n\r\n        let signedMessage = await LiminalMarket.Signer.signMessage(signingMessage)\r\n        let loginResponse = await this.httpRequest.post('me/validate', {\r\n            address: LiminalMarket.WalletAddress,\r\n            signedMessage\r\n        });\r\n\r\n        account = loginResponse as Account;\r\n        account.brokerId = loginResponse.alpacaId;\r\n        delete (account as any).alpacaId;\r\n\r\n        if (!account.address) {\r\n            throw new Error('Login not successful:' + JSON.stringify(account))\r\n        }\r\n        LiminalMarket.Bearer = account.token;\r\n\r\n        let base64 = btoa(JSON.stringify(account.token))\r\n        Helper.setCookie('validate', base64);\r\n\r\n        return account;\r\n    }\r\n\r\n    public async fundSandboxAccount(accountFunded?: (obj: any) => Promise<void> | undefined) {\r\n        await this.httpRequest.listen('BalanceSet', async (obj: any) => {\r\n            if (accountFunded) accountFunded(obj);\r\n        })\r\n        return await this.httpRequest.postAuth('/fundUser')\r\n    }\r\n\r\n    public async createSandboxAccount(firstName: string, lastName: string, email: string, accountReadyEvent?: (event : any) => Promise<void> | undefined): Promise<string> {\r\n        let response = await this.httpRequest.postAuth(\"sandboxCreateAccount\", {\r\n            given_name: firstName,\r\n            family_name: lastName,\r\n            email_address: email\r\n        });\r\n\r\n        if (accountReadyEvent) {\r\n            await this.httpRequest.listen('BalanceSet', async (event: any) => {\r\n                accountReadyEvent(event);\r\n            })\r\n        }\r\n        return response;\r\n    }\r\n\r\n    private async autoLogin() {\r\n        try {\r\n            let validate = Helper.getCookieValue('validate');\r\n            if (validate) {\r\n                let token = JSON.parse(atob(validate));\r\n                LiminalMarket.Bearer = token;\r\n                let result = await this.httpRequest.post('/me/jwt');\r\n                if (result.jwt) {\r\n                    let account = {} as Account;\r\n                    account.brokerId = result.alpacaId;\r\n                    account.chainId = result.chainId;\r\n                    account.token = token;\r\n                    account.address = result.address;\r\n                    return account;\r\n                }\r\n            }\r\n        } catch (e : any) {\r\n            Helper.deleteCookie('validate')\r\n        }\r\n        return;\r\n    }\r\n}",
		"documentation": "# AccountService.ts\n\nThis is a TypeScript code file that defines the `AccountService` class. The class is responsible for handling account-related operations such as KYC status, login, and sandbox account management. The class uses the `HttpRequest` class for making HTTP requests and the `Helper` class for managing cookies.\n\n## Usage\n\nTo use the `AccountService` class, first import it and create a new instance:\n\n```typescript\nimport AccountService from \"./AccountService\";\n\nconst accountService = new AccountService();\n```\n\nThen, you can call the available methods on the `accountService` instance.\n\n## Methods\n\n### kycStatus()\n\nThis method returns the KYC (Know Your Customer) status of the user's account. It returns a `Promise<KycStatus>` object containing the KYC status information.\n\n**Example:**\n\n```typescript\nconst kycStatus = await accountService.kycStatus();\nconsole.log(kycStatus);\n```\n\n### login()\n\nThis method logs the user into their account. It returns a `Promise<Account>` object containing the account information.\n\n**Example:**\n\n```typescript\nconst account = await accountService.login();\nconsole.log(account);\n```\n\n### fundSandboxAccount(accountFunded?: (obj: any) => Promise<void> | undefined)\n\nThis method funds the user's sandbox account. It takes an optional callback function `accountFunded` that will be called when the account is funded.\n\n**Example:**\n\n```typescript\nawait accountService.fundSandboxAccount((obj) => {\n  console.log(\"Account funded:\", obj);\n});\n```\n\n### createSandboxAccount(firstName: string, lastName: string, email: string, accountReadyEvent?: (event : any) => Promise<void> | undefined)\n\nThis method creates a new sandbox account for the user. It takes the user's first name, last name, and email address as parameters. It also takes an optional callback function `accountReadyEvent` that will be called when the account is ready.\n\n**Example:**\n\n```typescript\nconst response = await accountService.createSandboxAccount(\"John\", \"Doe\", \"john.doe@example.com\", (event) => {\n  console.log(\"Account ready:\", event);\n});\nconsole.log(response);\n```\n\n### autoLogin()\n\nThis private method attempts to automatically log the user in using a stored token. It returns a `Promise<Account>` object containing the account information if the auto-login is successful, or `undefined` if it fails.\n\n**Example:**\n\n```typescript\n// This method is private and should not be called directly.\n```\n\n## Technical Concepts\n\n### Nonce\n\nA nonce is a random number used in cryptographic operations to ensure that old communications cannot be reused in replay attacks. In this code, a nonce is used as part of the login process to ensure secure authentication.\n\n### JWT (JSON Web Token)\n\nA JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. In this code, JWT is used for authentication purposes.",
		"isFolder": false,
		"updated": "2023-04-17T15:29:07.133Z",
		"sidebar_position": 0,
		"sidebar_label": "AccountService.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\services",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"AccountService.ts\"\r\nThe file name is: AccountService.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport KycStatus from \"../dto/KycStatus\";\r\nimport HttpRequest from \"../http/HttpRequest\";\r\nimport {Account} from \"../dto/Account\";\r\nimport LiminalMarket from \"../index\";\r\nimport Helper from \"../Helper\";\r\n\r\nexport default class AccountService {\r\n    private signInMessage = \"You are logging into Liminal.market.\\n\\nNonce:\";\r\n    httpRequest: HttpRequest;\r\n\r\n    constructor() {\r\n        this.httpRequest = new HttpRequest();\r\n    }\r\n\r\n    public async kycStatus(): Promise<KycStatus> {\r\n        let result = (await this.httpRequest.getAuth(\"isValidKyc\")) as KycStatus;\r\n        if (!result.isValidKyc && result.status == 'ACTIVE') {\r\n            result.message = 'Kyc status is being written down on blockchain. This can take few minutes. Ask again in few minutes'\r\n        } else if (result.isValidKyc) {\r\n            result.message = 'This account can execute trades';\r\n        } else if (!result.isValidKyc) {\r\n            result.message = 'KYC for this account has not been approved. Current status is ' + result.status;\r\n        }\r\n        if ((result as any).alpacaId) {\r\n            result.brokerId = (result as any).alpacaId;\r\n            delete (result as any).alpacaId;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public async login(): Promise<Account> {\r\n        let account = await this.autoLogin();\r\n        if (account) return account;\r\n\r\n        let response = await this.httpRequest.post('/me/nonce', {address: LiminalMarket.WalletAddress});\r\n        let signingMessage = this.signInMessage + response.nonce;\r\n\r\n        let signedMessage = await LiminalMarket.Signer.signMessage(signingMessage)\r\n        let loginResponse = await this.httpRequest.post('me/validate', {\r\n            address: LiminalMarket.WalletAddress,\r\n            signedMessage\r\n        });\r\n\r\n        account = loginResponse as Account;\r\n        account.brokerId = loginResponse.alpacaId;\r\n        delete (account as any).alpacaId;\r\n\r\n        if (!account.address) {\r\n            throw new Error('Login not successful:' + JSON.stringify(account))\r\n        }\r\n        LiminalMarket.Bearer = account.token;\r\n\r\n        let base64 = btoa(JSON.stringify(account.token))\r\n        Helper.setCookie('validate', base64);\r\n\r\n        return account;\r\n    }\r\n\r\n    public async fundSandboxAccount(accountFunded?: (obj: any) => Promise<void> | undefined) {\r\n        await this.httpRequest.listen('BalanceSet', async (obj: any) => {\r\n            if (accountFunded) accountFunded(obj);\r\n        })\r\n        return await this.httpRequest.postAuth('/fundUser')\r\n    }\r\n\r\n    public async createSandboxAccount(firstName: string, lastName: string, email: string, accountReadyEvent?: (event : any) => Promise<void> | undefined): Promise<string> {\r\n        let response = await this.httpRequest.postAuth(\"sandboxCreateAccount\", {\r\n            given_name: firstName,\r\n            family_name: lastName,\r\n            email_address: email\r\n        });\r\n\r\n        if (accountReadyEvent) {\r\n            await this.httpRequest.listen('BalanceSet', async (event: any) => {\r\n                accountReadyEvent(event);\r\n            })\r\n        }\r\n        return response;\r\n    }\r\n\r\n    private async autoLogin() {\r\n        try {\r\n            let validate = Helper.getCookieValue('validate');\r\n            if (validate) {\r\n                let token = JSON.parse(atob(validate));\r\n                LiminalMarket.Bearer = token;\r\n                let result = await this.httpRequest.post('/me/jwt');\r\n                if (result.jwt) {\r\n                    let account = {} as Account;\r\n                    account.brokerId = result.alpacaId;\r\n                    account.chainId = result.chainId;\r\n                    account.token = token;\r\n                    account.address = result.address;\r\n                    return account;\r\n                }\r\n            }\r\n        } catch (e : any) {\r\n            Helper.deleteCookie('validate')\r\n        }\r\n        return;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\services\\AccountService.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "services"
		}
	},
	{
		"name": "BlockchainService.ts",
		"path": "src\\services\\BlockchainService.ts",
		"folderPath": "src\\services",
		"fileContent": "import {BigNumberish, ethers} from \"ethers\";\r\nimport LiminalMarket from \"../index\";\r\nimport HttpRequest from \"../http/HttpRequest\";\r\nimport ExecuteOrderResult from \"../dto/ExecuteOrderResult\";\r\n\r\nexport default class BlockchainService {\r\n\r\n    httpRequest: HttpRequest;\r\n\r\n    constructor() {\r\n        this.httpRequest = new HttpRequest();\r\n    }\r\n    public async executeOrder(side : string, symbol : string, quantity : BigNumberish) : Promise<ExecuteOrderResult> {\r\n        if (symbol.toLowerCase() == 'ausd') {\r\n            throw new Error('You cannot send order for aUSD.')\r\n        }\r\n\r\n        let amountOrQty = 'quantity';\r\n        let qty = ethers.utils.formatEther(quantity);\r\n        if (side == 'buy') {\r\n            amountOrQty = 'amount'\r\n            qty = '$' + qty;\r\n        }\r\n\r\n        let time = new Date();\r\n        let signMessage = `I confirm following order:\\n${side} ${symbol} for the ${amountOrQty} of ${qty}\r\n\r\n---------------\r\nChainId:${LiminalMarket.Network.ChainId}\r\nServiceContract:${LiminalMarket.ServiceContractAddress}\r\nTime:${time.toISOString()}\r\n`;\r\n        let signedMessage = await LiminalMarket.Signer.signMessage(signMessage);\r\n\r\n\r\n        return await this.httpRequest.postAuth('/executeOrder', {\r\n            signedMessage : signedMessage,\r\n            side : side,\r\n            symbol : symbol,\r\n            qty : quantity,\r\n            spender : LiminalMarket.ServiceContractAddress,\r\n            chainId : LiminalMarket.Network.ChainId,\r\n            time : time.getTime()\r\n        }) as ExecuteOrderResult;\r\n    }\r\n\r\n\r\n}",
		"documentation": "# BlockchainService.ts\n\nThis is a TypeScript code file that defines a `BlockchainService` class. The class is responsible for interacting with the LiminalMarket blockchain and executing orders. It uses the HttpRequest class to make HTTP requests to the LiminalMarket API.\n\n## Table of Contents\n\n- [Class: BlockchainService](#class-blockchainservice)\n  - [Constructor](#constructor)\n  - [Method: executeOrder](#method-executeorder)\n- [Examples](#examples)\n\n## Class: BlockchainService\n\n### Constructor\n\nThe constructor initializes a new instance of the `BlockchainService` class. It creates a new instance of the `HttpRequest` class and assigns it to the `httpRequest` property.\n\n```typescript\nconstructor() {\n    this.httpRequest = new HttpRequest();\n}\n```\n\n### Method: executeOrder\n\nThis method is responsible for executing an order on the LiminalMarket blockchain. It takes three parameters:\n\n- `side` (string): The side of the order, either \"buy\" or \"sell\".\n- `symbol` (string): The symbol of the asset being traded.\n- `quantity` (BigNumberish): The quantity of the asset being traded.\n\nThe method returns a Promise that resolves to an `ExecuteOrderResult` object.\n\n```typescript\npublic async executeOrder(side : string, symbol : string, quantity : BigNumberish) : Promise<ExecuteOrderResult> {\n    // ...\n}\n```\n\nThe method first checks if the symbol is 'ausd' and throws an error if it is. Then, it formats the quantity using the `ethers.utils.formatEther` function. If the side is \"buy\", it updates the `amountOrQty` variable to \"amount\" and adds a dollar sign to the quantity.\n\nNext, it creates a signMessage string containing the order details, including the chain ID, service contract address, and current time. It then signs the message using the `LiminalMarket.Signer.signMessage` function.\n\nFinally, it sends a POST request to the '/executeOrder' endpoint with the signed message and other order details. The response is cast to an `ExecuteOrderResult` object and returned.\n\n## Examples\n\nHere's an example of how to use the `BlockchainService` class to execute a buy order:\n\n```typescript\nimport BlockchainService from './BlockchainService';\n\nconst blockchainService = new BlockchainService();\nconst side = 'buy';\nconst symbol = 'eth';\nconst quantity = ethers.utils.parseEther('1');\n\nblockchainService.executeOrder(side, symbol, quantity)\n    .then((result) => {\n        console.log('Order executed successfully:', result);\n    })\n    .catch((error) => {\n        console.error('Error executing order:', error);\n    });\n```\n\nAnd here's an example of how to use the `BlockchainService` class to execute a sell order:\n\n```typescript\nimport BlockchainService from './BlockchainService';\n\nconst blockchainService = new BlockchainService();\nconst side = 'sell';\nconst symbol = 'eth';\nconst quantity = ethers.utils.parseEther('1');\n\nblockchainService.executeOrder(side, symbol, quantity)\n    .then((result) => {\n        console.log('Order executed successfully:', result);\n    })\n    .catch((error) => {\n        console.error('Error executing order:', error);\n    });\n```",
		"isFolder": false,
		"updated": "2023-04-17T15:30:57.926Z",
		"sidebar_position": 1,
		"sidebar_label": "BlockchainService.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\services",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"BlockchainService.ts\"\r\nThe file name is: BlockchainService.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {BigNumberish, ethers} from \"ethers\";\r\nimport LiminalMarket from \"../index\";\r\nimport HttpRequest from \"../http/HttpRequest\";\r\nimport ExecuteOrderResult from \"../dto/ExecuteOrderResult\";\r\n\r\nexport default class BlockchainService {\r\n\r\n    httpRequest: HttpRequest;\r\n\r\n    constructor() {\r\n        this.httpRequest = new HttpRequest();\r\n    }\r\n    public async executeOrder(side : string, symbol : string, quantity : BigNumberish) : Promise<ExecuteOrderResult> {\r\n        if (symbol.toLowerCase() == 'ausd') {\r\n            throw new Error('You cannot send order for aUSD.')\r\n        }\r\n\r\n        let amountOrQty = 'quantity';\r\n        let qty = ethers.utils.formatEther(quantity);\r\n        if (side == 'buy') {\r\n            amountOrQty = 'amount'\r\n            qty = '$' + qty;\r\n        }\r\n\r\n        let time = new Date();\r\n        let signMessage = `I confirm following order:\\n${side} ${symbol} for the ${amountOrQty} of ${qty}\r\n\r\n---------------\r\nChainId:${LiminalMarket.Network.ChainId}\r\nServiceContract:${LiminalMarket.ServiceContractAddress}\r\nTime:${time.toISOString()}\r\n`;\r\n        let signedMessage = await LiminalMarket.Signer.signMessage(signMessage);\r\n\r\n\r\n        return await this.httpRequest.postAuth('/executeOrder', {\r\n            signedMessage : signedMessage,\r\n            side : side,\r\n            symbol : symbol,\r\n            qty : quantity,\r\n            spender : LiminalMarket.ServiceContractAddress,\r\n            chainId : LiminalMarket.Network.ChainId,\r\n            time : time.getTime()\r\n        }) as ExecuteOrderResult;\r\n    }\r\n\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\services\\BlockchainService.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "services"
		}
	},
	{
		"name": "Listener.ts",
		"path": "src\\services\\Listener.ts",
		"folderPath": "src\\services",
		"fileContent": "import HttpRequest from \"../http/HttpRequest\";\r\n\r\nexport default class Listener {\r\n    static httpRequest: HttpRequest = new HttpRequest();\r\n\r\n    public static set onUpdatingAUsdOnChain(action : (event : any) => Promise<void>) {\r\n        this.httpRequest.listen('UpdatingAUsdOnChain', async (event : any) => {\r\n            await action(event);\r\n        })\r\n    }\r\n\r\n    public static set onBalanceSet(action : (event : any) => Promise<void>) {\r\n        this.httpRequest.listen('BalanceSet', async (event : any) => {\r\n            await action(event);\r\n        })\r\n    }\r\n\r\n\r\n    public static set onOrderSentToMarket(action : (event : any) => Promise<void>) {\r\n        this.httpRequest.listen('OrderSentToMarket', async (event : any) => {\r\n            await action(event);\r\n        })\r\n    }\r\n\r\n    public static set onOrderExecutedWritingToChain(action : (event : any) => Promise<void>) {\r\n        this.httpRequest.listen('OrderExecutedWritingBlockchain', async (event : any) => {\r\n            await action(event);\r\n        })\r\n    }\r\n\r\n    public static set onOrderExecuted(action : (event : any) => Promise<void>) {\r\n        this.httpRequest.listen('OrderExecuted', async (event : any) => {\r\n            await action(event);\r\n        })\r\n    }\r\n\r\n\r\n}",
		"documentation": "# Listener.ts\n\nThe `Listener.ts` file is a TypeScript code file that defines a `Listener` class. This class is responsible for listening to various events and executing the corresponding actions. It uses the `HttpRequest` class to handle the event listening and action execution.\n\n## Usage\n\nTo use the `Listener` class, you need to import it and set the appropriate event handlers. Here's an example of how to use the `Listener` class:\n\n```typescript\nimport Listener from \"./Listener\";\n\nListener.onUpdatingAUsdOnChain = async (event) => {\n    console.log(\"Updating A-USD on-chain event:\", event);\n    // Perform your desired action here\n};\n\nListener.onBalanceSet = async (event) => {\n    console.log(\"Balance set event:\", event);\n    // Perform your desired action here\n};\n```\n\n## Methods\n\n### onUpdatingAUsdOnChain\n\nThis method sets the action to be executed when the `UpdatingAUsdOnChain` event is triggered.\n\n- Parameters:\n  - `action`: A function that takes an `event` object as a parameter and returns a `Promise<void>`.\n\n### onBalanceSet\n\nThis method sets the action to be executed when the `BalanceSet` event is triggered.\n\n- Parameters:\n  - `action`: A function that takes an `event` object as a parameter and returns a `Promise<void>`.\n\n### onOrderSentToMarket\n\nThis method sets the action to be executed when the `OrderSentToMarket` event is triggered.\n\n- Parameters:\n  - `action`: A function that takes an `event` object as a parameter and returns a `Promise<void>`.\n\n### onOrderExecutedWritingToChain\n\nThis method sets the action to be executed when the `OrderExecutedWritingBlockchain` event is triggered.\n\n- Parameters:\n  - `action`: A function that takes an `event` object as a parameter and returns a `Promise<void>`.\n\n### onOrderExecuted\n\nThis method sets the action to be executed when the `OrderExecuted` event is triggered.\n\n- Parameters:\n  - `action`: A function that takes an `event` object as a parameter and returns a `Promise<void>`.\n\n## Technical Concepts\n\n### Event Handling\n\nThe `Listener` class uses the `HttpRequest` class to listen for events and execute the corresponding actions. This is done using the `listen` method of the `HttpRequest` class, which takes an event name and a callback function as parameters. The callback function is executed when the specified event is triggered.\n\n### Promises\n\nThe `Listener` class methods return a `Promise<void>`, which indicates that the action will be executed asynchronously. This allows for non-blocking execution of the action, ensuring that the application remains responsive while the action is being performed.",
		"isFolder": false,
		"updated": "2023-04-17T15:32:34.190Z",
		"sidebar_position": 2,
		"sidebar_label": "Listener.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\services",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"Listener.ts\"\r\nThe file name is: Listener.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport HttpRequest from \"../http/HttpRequest\";\r\n\r\nexport default class Listener {\r\n    static httpRequest: HttpRequest = new HttpRequest();\r\n\r\n    public static set onUpdatingAUsdOnChain(action : (event : any) => Promise<void>) {\r\n        this.httpRequest.listen('UpdatingAUsdOnChain', async (event : any) => {\r\n            await action(event);\r\n        })\r\n    }\r\n\r\n    public static set onBalanceSet(action : (event : any) => Promise<void>) {\r\n        this.httpRequest.listen('BalanceSet', async (event : any) => {\r\n            await action(event);\r\n        })\r\n    }\r\n\r\n\r\n    public static set onOrderSentToMarket(action : (event : any) => Promise<void>) {\r\n        this.httpRequest.listen('OrderSentToMarket', async (event : any) => {\r\n            await action(event);\r\n        })\r\n    }\r\n\r\n    public static set onOrderExecutedWritingToChain(action : (event : any) => Promise<void>) {\r\n        this.httpRequest.listen('OrderExecutedWritingBlockchain', async (event : any) => {\r\n            await action(event);\r\n        })\r\n    }\r\n\r\n    public static set onOrderExecuted(action : (event : any) => Promise<void>) {\r\n        this.httpRequest.listen('OrderExecuted', async (event : any) => {\r\n            await action(event);\r\n        })\r\n    }\r\n\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\services\\Listener.ts",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "services"
		}
	},
	{
		"name": "README",
		"path": "src\\dto",
		"folderPath": "src\\dto",
		"fileContent": "",
		"documentation": "# Liminal Market Libraries - Core DTO\n\nThis folder contains TypeScript files that define various interfaces and classes related to the core functionality of the Liminal Market Libraries. These files are responsible for handling data transfer objects (DTOs) within the system.\n\n## Table of Contents\n\n1. [Account.ts](#accountts)\n2. [ExecuteOrderResult.ts](#executeorderresultts)\n3. [KycStatus.ts](#kycstatusts)\n4. [OrderDto.ts](#orderdtots)\n5. [OrderExecutedEvent.ts](#orderexecutedeventts)\n6. [OrderSide.ts](#ordersidets)\n\n## Account.ts\n\nAccount.ts is a TypeScript file that provides an overview of the account-related functionality within the system.\n\n[Read more about Account.ts](Account.ts)\n\n## ExecuteOrderResult.ts\n\nThis is a TypeScript code file that defines an interface called `ExecuteOrderResult`. The interface is used to represent the result of an order execution operation. It contains three properties: `success`, `message`, and `order`.\n\n[Read more about ExecuteOrderResult.ts](ExecuteOrderResult.ts)\n\n## KycStatus.ts\n\nKycStatus.ts is a TypeScript code file that defines an interface called `KycStatus`. This interface is used to represent the Know Your Customer (KYC) status of a user in a financial application. The KYC process is a standard practice in the finance industry to verify the identity of clients and assess their suitability for financial services.\n\n[Read more about KycStatus.ts](KycStatus.ts)\n\n## OrderDto.ts\n\nThis is a TypeScript code file that defines the `OrderDto` class. The `OrderDto` class is used to represent an order in a trading system. This class contains various properties related to an order, such as its status, wallet address, chain ID, symbol, side, amount, and other related information.\n\n[Read more about OrderDto.ts](OrderDto.ts)\n\n## OrderExecutedEvent.ts\n\nThis TypeScript file defines an interface called `OrderExecutedEvent`. The interface represents an event that occurs when an order is executed in a trading system. It contains various properties related to the executed order, such as recipient, symbol, tsl, filled quantity, filled average price, side, filled time, total service fee, aUsd balance, spender, and block information.\n\n[Read more about OrderExecutedEvent.ts](OrderExecutedEvent.ts)\n\n## OrderSide.ts\n\nOrderSide.ts is a TypeScript file that provides an overview of the order side-related functionality within the system.\n\n[Read more about OrderSide.ts](OrderSide.ts)\n\n---\n\n[View the repository on GitHub](https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src/dto)",
		"isFolder": true,
		"updated": "2023-04-17T15:34:06.643Z",
		"sidebar_position": 30,
		"sidebar_label": "dto",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\dto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src/dto\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"Account.ts\",\"path\":\"src\\\\dto\\\\Account.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# Account.ts\\n\\n## Overview\"},{\"name\":\"ExecuteOrderResult.ts\",\"path\":\"src\\\\dto\\\\ExecuteOrderResult.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ExecuteOrderResult.ts\\n\\nThis is a TypeScript code file that defines an interface called `ExecuteOrderResult`. The interface is used to represent the result of an order execution operation. It contains three properties: `success`, `message`, and `order`. This documentation will provide a detailed description of the interface, its properties, and examples of how to use it.\\n\\n## Interface Description\"},{\"name\":\"KycStatus.ts\",\"path\":\"src\\\\dto\\\\KycStatus.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# KycStatus.ts\\n\\nKycStatus.ts is a TypeScript code file that defines an interface called `KycStatus`. This interface is used to represent the Know Your Customer (KYC) status of a user in a financial application. The KYC process is a standard practice in the finance industry to verify the identity of clients and assess their suitability for financial services.\\n\\n## Interface: KycStatus\"},{\"name\":\"OrderDto.ts\",\"path\":\"src\\\\dto\\\\OrderDto.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OrderDto.ts\\n\\nThis is a TypeScript code file that defines the `OrderDto` class. The `OrderDto` class is used to represent an order in a trading system. This class contains various properties related to an order, such as its status, wallet address, chain ID, symbol, side, amount, and other related information.\\n\\n## Usage\"},{\"name\":\"OrderExecutedEvent.ts\",\"path\":\"src\\\\dto\\\\OrderExecutedEvent.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OrderExecutedEvent.ts\\n\\nThis TypeScript file defines an interface called `OrderExecutedEvent`. The interface represents an event that occurs when an order is executed in a trading system. It contains various properties related to the executed order, such as recipient, symbol, tsl, filled quantity, filled average price, side, filled time, total service fee, aUsd balance, spender, and block information.\\n\\n## Interface Description\"},{\"name\":\"OrderSide.ts\",\"path\":\"src\\\\dto\\\\OrderSide.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OrderSide.ts\\n\\n## Overview\"}]\r\n###"
			}
		],
		"id": "src\\dto",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "src\\error",
		"folderPath": "src\\error",
		"fileContent": "",
		"documentation": "# Liminal Market Libraries - Error Folder Documentation\n\nThis folder is responsible for handling errors in the Liminal Market Libraries system. It contains error classes and utilities to manage and report errors in a consistent and informative manner.\n\n## Table of Contents\n\n1. [BlockchainError.ts](#blockchainerror.ts)\n\n## BlockchainError.ts\n\n### Overview\n\nThe `BlockchainError.ts` file contains the `BlockchainError` class, which is responsible for handling errors related to blockchain operations. This class extends the native JavaScript `Error` class and provides additional information about the error, such as the error code and a detailed message.\n\n[Detailed documentation for BlockchainError.ts](BlockchainError.ts)\n\n---\n\n[Back to Repository](https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src/error)",
		"isFolder": true,
		"updated": "2023-04-17T15:34:34.282Z",
		"sidebar_position": 31,
		"sidebar_label": "error",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\error",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src/error\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"BlockchainError.ts\",\"path\":\"src\\\\error\\\\BlockchainError.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# BlockchainError.ts\\n\\n## Overview\"}]\r\n###"
			}
		],
		"id": "src\\error",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "src\\http",
		"folderPath": "src\\http",
		"fileContent": "",
		"documentation": "# LiminalMarket HTTP Folder Documentation\n\nThis folder is responsible for handling HTTP requests and real-time updates in the LiminalMarket application. It contains a TypeScript file, HttpRequest.ts, which provides a class for managing HTTP requests.\n\n## HttpRequest.ts\n\n[HttpRequest.ts](src/http/HttpRequest.ts) is a TypeScript file that provides a class for handling HTTP requests in the LiminalMarket application. This class includes methods for sending authenticated and unauthenticated GET and POST requests, as well as listening for real-time updates using the EventSource API.\n\n### Usage Examples\n\nFor more detailed information and usage examples, please refer to the [HttpRequest.ts documentation](src/http/HttpRequest.ts).\n\n## Repository Link\n\nFor the complete source code and additional information, visit the [LiminalMarket HTTP folder in the GitHub repository](https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src/http).",
		"isFolder": true,
		"updated": "2023-04-17T15:35:05.512Z",
		"sidebar_position": 32,
		"sidebar_label": "http",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\http",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src/http\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"HttpRequest.ts\",\"path\":\"src\\\\http\\\\HttpRequest.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# HttpRequest.ts\\n\\nHttpRequest.ts is a TypeScript file that provides a class for handling HTTP requests in the LiminalMarket application. This class includes methods for sending authenticated and unauthenticated GET and POST requests, as well as listening for real-time updates using the EventSource API.\\n\\n## Usage Examples\"}]\r\n###"
			}
		],
		"id": "src\\http",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "src\\networks",
		"folderPath": "src\\networks",
		"fileContent": "",
		"documentation": "# Liminal Market Libraries - Networks\n\nThis folder contains various TypeScript files responsible for managing different blockchain networks and their configurations. The files define classes for localhost, main network, Mumbai test network, and other network types.\n\n## Table of Contents\n\n- [LocalhostNetwork.ts](#localhostnetworkts)\n- [LocalhostNetworkDefaults.ts](#localhostnetworkdefaultsts)\n- [MainNetwork.ts](#mainnetworkts)\n- [MumbaiNetwork.ts](#mumbainetworkts)\n- [MumbaiNetworkDefaults.ts](#mumbainetworkdefaultsts)\n- [Network.ts](#networkts)\n- [NetworkType.ts](#networktypets)\n- [TestNetwork.ts](#testnetworkts)\n\n## LocalhostNetwork.ts\n\nThis is a TypeScript code file that defines a class named `LocalhostNetwork`. The class extends another class called `LocalhostNetworkDefaults`. This class is used to manage and override default network addresses for various contracts in a localhost environment.\n\n[LocalhostNetwork.ts Documentation](LocalhostNetwork.ts)\n\n## LocalhostNetworkDefaults.ts\n\nThis is a TypeScript code file that defines an abstract class `LocalhostNetworkDefaults` which extends the `TestNetwork` class. The purpose of this class is to provide default configurations for a localhost Ethereum network.\n\n[LocalhostNetworkDefaults.ts Documentation](LocalhostNetworkDefaults.ts)\n\n## MainNetwork.ts\n\nThe `MainNetwork.ts` file is a TypeScript code file that defines an abstract class `MainNetwork` which extends the `Network` class. This class is responsible for setting up the main network configuration for the application.\n\n[MainNetwork.ts Documentation](MainNetwork.ts)\n\n## MumbaiNetwork.ts\n\nThis is a TypeScript code file that defines a class named `MumbaiNetwork` which extends the `MumbaiNetworkDefaults` class. The `MumbaiNetwork` class is used to manage the addresses of various contracts on the Mumbai test network.\n\n[MumbaiNetwork.ts Documentation](MumbaiNetwork.ts)\n\n## MumbaiNetworkDefaults.ts\n\nThis is a TypeScript code file that defines the `MumbaiNetworkDefaults` class, which extends the `TestNetwork` class. The `MumbaiNetworkDefaults` class provides default configurations and settings for the Mumbai test network on the Polygon blockchain.\n\n[MumbaiNetworkDefaults.ts Documentation](MumbaiNetworkDefaults.ts)\n\n## Network.ts\n\nThis is a TypeScript code file that defines an abstract class `Network`. The `Network` class serves as a base class for different blockchain networks, providing essential properties and methods for interacting with them.\n\n[Network.ts Documentation](Network.ts)\n\n## NetworkType.ts\n\nThis is a TypeScript code file that defines a `NetworkType` class. The class is responsible for managing different network types and providing instances of the appropriate network based on the provided chain ID.\n\n[NetworkType.ts Documentation](NetworkType.ts)\n\n## TestNetwork.ts\n\nThis is a TypeScript code file that defines an abstract class `TestNetwork` which extends the `Network` class. The purpose of this class is to provide a base implementation for test networks, with a predefined server URL and a flag indicating that it is a test network.\n\n[TestNetwork.ts Documentation](TestNetwork.ts)\n\n---\n\n[View Repository](https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src/networks)",
		"isFolder": true,
		"updated": "2023-04-17T15:37:03.878Z",
		"sidebar_position": 33,
		"sidebar_label": "networks",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\networks",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src/networks\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"LocalhostNetwork.ts\",\"path\":\"src\\\\networks\\\\LocalhostNetwork.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# LocalhostNetwork.ts\\n\\nThis is a TypeScript code file that defines a class named `LocalhostNetwork`. The class extends another class called `LocalhostNetworkDefaults`. This class is used to manage and override default network addresses for various contracts in a localhost environment.\\n\\n## Table of Contents\"},{\"name\":\"LocalhostNetworkDefaults.ts\",\"path\":\"src\\\\networks\\\\LocalhostNetworkDefaults.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# LocalhostNetworkDefaults.ts\\n\\nThis is a TypeScript code file that defines an abstract class `LocalhostNetworkDefaults` which extends the `TestNetwork` class. The purpose of this class is to provide default configurations for a localhost Ethereum network.\\n\\n## Table of Contents\"},{\"name\":\"MainNetwork.ts\",\"path\":\"src\\\\networks\\\\MainNetwork.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# MainNetwork.ts\\n\\nThe `MainNetwork.ts` file is a TypeScript code file that defines an abstract class `MainNetwork` which extends the `Network` class. This class is responsible for setting up the main network configuration for the application.\\n\\n## Table of Contents\"},{\"name\":\"MumbaiNetwork.ts\",\"path\":\"src\\\\networks\\\\MumbaiNetwork.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# MumbaiNetwork.ts\\n\\nThis is a TypeScript code file that defines a class named `MumbaiNetwork` which extends the `MumbaiNetworkDefaults` class. The `MumbaiNetwork` class is used to manage the addresses of various contracts on the Mumbai test network.\\n\\n## Table of Contents\"},{\"name\":\"MumbaiNetworkDefaults.ts\",\"path\":\"src\\\\networks\\\\MumbaiNetworkDefaults.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# MumbaiNetworkDefaults.ts\\n\\nThis is a TypeScript code file that defines the `MumbaiNetworkDefaults` class, which extends the `TestNetwork` class. The `MumbaiNetworkDefaults` class provides default configurations and settings for the Mumbai test network on the Polygon blockchain.\\n\\n## Table of Contents\"},{\"name\":\"Network.ts\",\"path\":\"src\\\\networks\\\\Network.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# Network.ts\\n\\nThis is a TypeScript code file that defines an abstract class `Network`. The `Network` class serves as a base class for different blockchain networks, providing essential properties and methods for interacting with them.\\n\\n## Class Description\"},{\"name\":\"NetworkType.ts\",\"path\":\"src\\\\networks\\\\NetworkType.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# NetworkType.ts\\n\\nThis is a TypeScript code file that defines a `NetworkType` class. The class is responsible for managing different network types and providing instances of the appropriate network based on the provided chain ID.\\n\\n## Table of Contents\"},{\"name\":\"TestNetwork.ts\",\"path\":\"src\\\\networks\\\\TestNetwork.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# TestNetwork.ts\\n\\nThis is a TypeScript code file that defines an abstract class `TestNetwork` which extends the `Network` class. The purpose of this class is to provide a base implementation for test networks, with a predefined server URL and a flag indicating that it is a test network.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\networks",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "src\\services",
		"folderPath": "src\\services",
		"fileContent": "",
		"documentation": "# Liminal Market Libraries - Services\n\nThis folder contains the core services for the Liminal Market Libraries. These services are responsible for handling various operations such as account management, interacting with the LiminalMarket blockchain, and listening to events.\n\n## Table of Contents\n\n- [AccountService.ts](#accountservicets)\n- [BlockchainService.ts](#blockchainservicets)\n- [Listener.ts](#listenerts)\n\n## AccountService.ts\n\nThis is a TypeScript code file that defines the `AccountService` class. The class is responsible for handling account-related operations such as KYC status, login, and sandbox account management. The class uses the `HttpRequest` class for making HTTP requests and the `Helper` class for managing cookies.\n\n[Read more about AccountService.ts](AccountService.ts)\n\n## BlockchainService.ts\n\nThis is a TypeScript code file that defines a `BlockchainService` class. The class is responsible for interacting with the LiminalMarket blockchain and executing orders. It uses the HttpRequest class to make HTTP requests to the LiminalMarket API.\n\n[Read more about BlockchainService.ts](BlockchainService.ts)\n\n## Listener.ts\n\nThe `Listener.ts` file is a TypeScript code file that defines a `Listener` class. This class is responsible for listening to various events and executing the corresponding actions. It uses the `HttpRequest` class to handle the event listening and action execution.\n\n[Read more about Listener.ts](Listener.ts)\n\n---\n\n[View the repository on GitHub](https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src/services)",
		"isFolder": true,
		"updated": "2023-04-17T15:37:55.484Z",
		"sidebar_position": 34,
		"sidebar_label": "services",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\services",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src/services\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"AccountService.ts\",\"path\":\"src\\\\services\\\\AccountService.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# AccountService.ts\\n\\nThis is a TypeScript code file that defines the `AccountService` class. The class is responsible for handling account-related operations such as KYC status, login, and sandbox account management. The class uses the `HttpRequest` class for making HTTP requests and the `Helper` class for managing cookies.\\n\\n## Usage\"},{\"name\":\"BlockchainService.ts\",\"path\":\"src\\\\services\\\\BlockchainService.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# BlockchainService.ts\\n\\nThis is a TypeScript code file that defines a `BlockchainService` class. The class is responsible for interacting with the LiminalMarket blockchain and executing orders. It uses the HttpRequest class to make HTTP requests to the LiminalMarket API.\\n\\n## Table of Contents\"},{\"name\":\"Listener.ts\",\"path\":\"src\\\\services\\\\Listener.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# Listener.ts\\n\\nThe `Listener.ts` file is a TypeScript code file that defines a `Listener` class. This class is responsible for listening to various events and executing the corresponding actions. It uses the `HttpRequest` class to handle the event listening and action execution.\\n\\n## Usage\"}]\r\n###"
			}
		],
		"id": "src\\services",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "src",
		"folderPath": "src",
		"fileContent": "",
		"documentation": "# Liminal Market Libraries - Core\n\nThis folder contains the core functionality of the Liminal Market Libraries. It is responsible for managing various operations such as account management, interacting with the LiminalMarket blockchain, and listening to events.\n\n## Table of Contents\n\n- [abis.ts](#abis.ts)\n- [Helper.ts](#Helper.ts)\n- [index.ts](#index.ts)\n- [dto](#dto)\n- [error](#error)\n- [http](#http)\n- [networks](#networks)\n- [services](#services)\n\n### abis.ts\n\nThis is a TypeScript code file that exports a class named `Abis`. The class contains three static properties: `LiminalMarketExternalServiceAbi`, `LiminalMarketAbi`, and `BalanceOfAbi`. These properties store the ABI (Application Binary Interface) of different smart contracts. The ABI is an interface used to interact with the smart contracts on the Ethereum blockchain.\n\n#### Class: Abis\n\n### Helper.ts\n\nThe `Helper.ts` file contains a TypeScript class named `Helper` that provides utility methods for managing cookies in a web application. This class includes methods for setting, getting, and deleting cookies.\n\n#### Usage\n\n### index.ts\n\n### dto\n\nThis folder contains TypeScript files that define various interfaces and classes related to the core functionality of the Liminal Market Libraries. These files are responsible for handling data transfer objects (DTOs) within the system.\n\n#### Table of Contents\n\n### error\n\nThis folder is responsible for handling errors in the Liminal Market Libraries system. It contains error classes and utilities to manage and report errors in a consistent and informative manner.\n\n#### Table of Contents\n\n### http\n\nThis folder is responsible for handling HTTP requests and real-time updates in the LiminalMarket application. It contains a TypeScript file, HttpRequest.ts, which provides a class for managing HTTP requests.\n\n#### HttpRequest.ts\n\n### networks\n\nThis folder contains various TypeScript files responsible for managing different blockchain networks and their configurations. The files define classes for localhost, main network, Mumbai test network, and other network types.\n\n#### Table of Contents\n\n### services\n\nThis folder contains the core services for the Liminal Market Libraries. These services are responsible for handling various operations such as account management, interacting with the LiminalMarket blockchain, and listening to events.\n\n#### Table of Contents\n\n[Link to Repository](https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src)",
		"isFolder": true,
		"updated": "2023-04-17T15:39:16.535Z",
		"sidebar_position": 30,
		"sidebar_label": "src",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core/src\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"abis.ts\",\"path\":\"src\\\\abis.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# abis.ts\\n\\nThis is a TypeScript code file that exports a class named `Abis`. The class contains three static properties: `LiminalMarketExternalServiceAbi`, `LiminalMarketAbi`, and `BalanceOfAbi`. These properties store the ABI (Application Binary Interface) of different smart contracts. The ABI is an interface used to interact with the smart contracts on the Ethereum blockchain.\\n\\n## Class: Abis\"},{\"name\":\"Helper.ts\",\"path\":\"src\\\\Helper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# Helper.ts\\n\\nThe `Helper.ts` file contains a TypeScript class named `Helper` that provides utility methods for managing cookies in a web application. This class includes methods for setting, getting, and deleting cookies.\\n\\n## Usage\"},{\"name\":\"index.ts\",\"path\":\"src\\\\index.ts\",\"fileOrFolder\":\"file\",\"summary\":\"\"},{\"name\":\"dto\",\"path\":\"src\\\\dto\",\"fileOrFolder\":\"folder\",\"summary\":\"# Liminal Market Libraries - Core DTO\\n\\nThis folder contains TypeScript files that define various interfaces and classes related to the core functionality of the Liminal Market Libraries. These files are responsible for handling data transfer objects (DTOs) within the system.\\n\\n## Table of Contents\"},{\"name\":\"error\",\"path\":\"src\\\\error\",\"fileOrFolder\":\"folder\",\"summary\":\"# Liminal Market Libraries - Error Folder Documentation\\n\\nThis folder is responsible for handling errors in the Liminal Market Libraries system. It contains error classes and utilities to manage and report errors in a consistent and informative manner.\\n\\n## Table of Contents\"},{\"name\":\"http\",\"path\":\"src\\\\http\",\"fileOrFolder\":\"folder\",\"summary\":\"# LiminalMarket HTTP Folder Documentation\\n\\nThis folder is responsible for handling HTTP requests and real-time updates in the LiminalMarket application. It contains a TypeScript file, HttpRequest.ts, which provides a class for managing HTTP requests.\\n\\n## HttpRequest.ts\"},{\"name\":\"networks\",\"path\":\"src\\\\networks\",\"fileOrFolder\":\"folder\",\"summary\":\"# Liminal Market Libraries - Networks\\n\\nThis folder contains various TypeScript files responsible for managing different blockchain networks and their configurations. The files define classes for localhost, main network, Mumbai test network, and other network types.\\n\\n## Table of Contents\"},{\"name\":\"services\",\"path\":\"src\\\\services\",\"fileOrFolder\":\"folder\",\"summary\":\"# Liminal Market Libraries - Services\\n\\nThis folder contains the core services for the Liminal Market Libraries. These services are responsible for handling various operations such as account management, interacting with the LiminalMarket blockchain, and listening to events.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "Use library",
		"path": "howto\\Use library",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "",
		"isFolder": false,
		"updated": "2023-04-17T15:39:17.107Z",
		"sidebar_label": "Use library",
		"init": false,
		"postInit": false,
		"generator": "HowTo",
		"saveToPath": "howto/",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "You are documentation expert.\r\nBuild a HowTo guide by using the description in the ::: howto and from the code on how to do it.\r\nAssume the user already setup environment and has the underlying knowledge to use the howto\r\n\r\nimport Network from \"./networks/Network\";\r\nimport {BigNumber, BigNumberish, ethers, Signer, Wallet} from \"ethers\";\r\nimport HttpRequest from \"./http/HttpRequest\";\r\nimport NetworkType from \"./networks/NetworkType\";\r\nimport {Account} from \"./dto/Account\";\r\nimport KycStatus from \"./dto/KycStatus\";\r\nimport AccountService from \"./services/AccountService\";\r\nimport BlockchainService from \"./services/BlockchainService\";\r\nimport Abis from \"./abis\";\r\nimport {Provider} from \"@ethersproject/abstract-provider\";\r\nimport ExecuteOrderResult from \"./dto/ExecuteOrderResult\";\r\nimport Listener from \"./services/Listener\";\r\nimport MumbaiNetwork from \"./networks/MumbaiNetwork\";\r\n\r\n/*\r\nThe main class to use for LiminalMarket. User should use this to communicate with Liminal.market.\r\nFor testing use Mumbai network, chain id 80001\r\n\r\n::: howto Use library\r\nShow how to import library\r\nShow how to register user\r\nShow how to execute order\r\nShow how to get position\r\n */\r\nexport default class LiminalMarket {\r\n    httpRequest : HttpRequest;\r\n    blockchainService : BlockchainService;\r\n    accountService : AccountService;\r\n    account : Account;\r\n    static Provider : any;\r\n    static Signer : any;\r\n    static ServiceContractAddress : string;\r\n    static Network : Network;\r\n    static WalletAddress : string;\r\n    static Bearer? : string;\r\n    public static Instance : LiminalMarket;\r\n    private constructor() {\r\n        this.httpRequest = new HttpRequest();\r\n        this.blockchainService = new BlockchainService();\r\n        this.accountService = new AccountService();\r\n        this.account = {} as Account;\r\n    }\r\n\r\n    public static async getInstanceUsingPrivateKey(privateKey : string, chainId : number, serviceContractAddress? : string | undefined){\r\n        LiminalMarket.Network = NetworkType.getInstance(chainId) ?? new MumbaiNetwork();\r\n        if (LiminalMarket.Network.ChainId == 0) {\r\n            throw new Error('Network is not supported. Using chainId ' + chainId + '. Try switching to different network, e.g. Mumbai');\r\n        }\r\n        let provider = new ethers.providers.JsonRpcProvider(LiminalMarket.Network.RpcUrl);\r\n        let wallet = new Wallet(privateKey, provider)\r\n        return await this.getInstanceByWallet(wallet, serviceContractAddress);\r\n    }\r\n\r\n    public static async getInstance(provider? : ethers.providers.JsonRpcProvider | undefined, serviceContractAddress? : string | undefined) {\r\n        if (!provider) {\r\n            // @ts-ignore\r\n            provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        }\r\n\r\n        let signer = await provider.getSigner();\r\n        if (!signer) {\r\n            throw new Error('Provider needs to have a signer.')\r\n        }\r\n\r\n        let address = await signer.getAddress()\r\n        if (!address) {\r\n            throw new Error('No account could be access')\r\n        }\r\n\r\n        let network = await provider.getNetwork()\r\n        return await this.load(address, provider, signer, network.chainId, serviceContractAddress)\r\n    }\r\n\r\n\r\n    public static async getInstanceByWallet(wallet : Wallet, serviceContractAddress? : string | undefined) {\r\n        if (this.Instance) return this.Instance;\r\n\r\n        if (!wallet) {\r\n            throw new Error('Provider cannot be null')\r\n        }\r\n        let chainId = await wallet.getChainId();\r\n\r\n        return await this.load(wallet.address,  wallet.provider,  wallet as any as Signer, chainId, serviceContractAddress);\r\n    }\r\n\r\n    private static async load(walletAddress : string, provider : Provider, signer : Signer, chainId : number, serviceContractAddress : string | undefined) {\r\n        LiminalMarket.Provider = provider;\r\n        LiminalMarket.Signer = signer;\r\n\r\n        LiminalMarket.Network = NetworkType.getInstance(chainId) ?? new MumbaiNetwork();\r\n        if (LiminalMarket.Network.ChainId == 0) {\r\n            throw new Error('Network is not supported. Using chainId ' + chainId + '. Try switching to different network, e.g. Mumbai');\r\n        }\r\n\r\n        LiminalMarket.ServiceContractAddress = (serviceContractAddress) ? serviceContractAddress : LiminalMarket.Network.NO_FEE_SERVICE_CONTRACT_ADDRESS;\r\n\r\n        if (!LiminalMarket.ServiceContractAddress) {\r\n            throw new Error('ServiceContractAddress cannot be empty. You can get service contract address by signing contract at https://liminal.market/contract. No cost (except gas)')\r\n        }\r\n\r\n        if (LiminalMarket.ServiceContractAddress == LiminalMarket.Network.NO_FEE_SERVICE_CONTRACT_ADDRESS) {\r\n            console.debug('No service contract address set. You will not receive any service fee. Check out https://liminal.market/contract/')\r\n        }\r\n\r\n        LiminalMarket.WalletAddress = walletAddress;\r\n\r\n        let liminalMarket = new LiminalMarket();\r\n        liminalMarket.account = await liminalMarket.accountService.login();\r\n\r\n        this.Instance = liminalMarket;\r\n\r\n        return liminalMarket;\r\n    }\r\n\r\n    public static get Listener() : Listener {\r\n        return Listener;\r\n    }\r\n\r\n    /**\r\n     * Return true if market is open, else false\r\n     */\r\n    public async isMarketOpen() : Promise<boolean> {\r\n        return (await this.httpRequest.get('isOpen')).marketIsOpen;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the user has been created at the broker, false if he does not exist at broker\r\n     * If it returns false, you can call createSandboxAccount to create the user at broker.\r\n     */\r\n    public hasAccount() : boolean {\r\n        return this.account.brokerId !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Create user on sandbox at the broker. This is for running on Mumbai testnet.\r\n     *\r\n     * @param {function} accountReadyEvent - function is called when the account is ready\r\n     */\r\n    public async createSandboxAccount(firstName : string, lastName : string, email : string,\r\n                                      accountReadyEvent? : () => Promise<void> | undefined) : Promise<string> {\r\n        return await this.accountService.createSandboxAccount(firstName, lastName, email, accountReadyEvent);\r\n    }\r\n\r\n    /**\r\n     * Returns the status of the account. Most important is if KYC has been approved.\r\n     * Trades cannot be executed if KYC is not valid.\r\n     */\r\n    public async kycStatus() : Promise<KycStatus> {\r\n        let accountService = new AccountService();\r\n        return await accountService.kycStatus();\r\n    }\r\n\r\n    /**\r\n     * Funds wallets sandbox account. There are limitation on how frequently you can fund your account.\r\n     **/\r\n    public async fundSandboxAccount(accountFunded? : (obj : any) => Promise<void> | undefined) {\r\n        return await this.accountService.fundSandboxAccount(accountFunded)\r\n    }\r\n\r\n    /**\r\n     * Get the balance of aUSD token.\r\n     * @param {string} [address] - Optional. Uses the address from the provider is address is not provided\r\n     */\r\n    public async getAUSDBalance(address? : string | undefined) : Promise<BigNumber> {\r\n        if (!address) address = LiminalMarket.WalletAddress;\r\n        return await this.getSecurityTokenQuantity(LiminalMarket.Network.AUSD_ADDRESS, address)\r\n    }\r\n\r\n    /**\r\n     * Return all symbols available in the system.\r\n     */\r\n    public async getSymbols() {\r\n        return await this.httpRequest.get('https://app.liminal.market/securities/securities.json')\r\n    }\r\n\r\n    /**\r\n     * Returns the position wallet address has. It is also possible to query any wallet address\r\n     * @param address\r\n     */\r\n    public async getPositions(address? : string) {\r\n        if (!address) address = LiminalMarket.WalletAddress;\r\n        return await this.httpRequest.get('positions', {address:address})\r\n    }\r\n\r\n    /**\r\n     * Get the balance of a security token.\r\n     * @param {string} [address] - Optional. Uses the address from the provider is address is not provided\r\n     */\r\n    public async getSecurityTokenQuantity(symbolOrAddress : string, address? : string | undefined) : Promise<BigNumber> {\r\n        if (!address) address = LiminalMarket.WalletAddress;\r\n        if (symbolOrAddress.indexOf('0x') == -1) {\r\n            symbolOrAddress = await this.getSecurityTokenAddress(symbolOrAddress);\r\n            if (symbolOrAddress == ethers.constants.AddressZero) return BigNumber.from(0);\r\n        }\r\n\r\n        const contract = new ethers.Contract(symbolOrAddress, Abis.BalanceOfAbi, LiminalMarket.Provider);\r\n        return await contract['balanceOf']!(address);\r\n    }\r\n\r\n    /**\r\n     * Get the address of a security token (symbol)\r\n     */\r\n    public async getSecurityTokenAddress(symbol: string) : Promise<string> {\r\n        const contract = new ethers.Contract(LiminalMarket.Network.LIMINAL_MARKET_ADDRESS, Abis.LiminalMarketAbi, LiminalMarket.Provider);\r\n        return await contract['getSecurityToken']!(symbol);\r\n    }\r\n\r\n\r\n    /**\r\n     * Send the command to buy a security token\r\n     * @param {string}  symbol - Symbol of the security to buy, e.g. AAPL for Apple.\r\n     * @param {string}  amount - Dollar amount in Wei, $100 is equal to 100 * 10**18. Buying for $54.32 would be 5432 * 10**16\r\n     * @param {function} [orderExecutedEvent] - Optional. Listens for the orderExecuted event on chain, then calls your function.\r\n     *\r\n     * */\r\n    public async buySecurityToken(symbol : string, amount : BigNumberish) : Promise<ExecuteOrderResult> {\r\n        return await this.blockchainService.executeOrder('buy', symbol, amount);\r\n    }\r\n\r\n    /**\r\n     * Send the command to sell a security token\r\n     * @param {string}  symbol - Symbol of the security to buy, e.g. AAPL for Apple.\r\n     * @param {string}  quantity - Quantity of shares to sell in Wei. Selling 10 shares would be 10 * 10**18. Selling 1.234 shares would be 123 * 10*15\r\n     * @param {function} [orderExecutedEvent] - Optional. Listens for the orderExecuted event on chain, then calls your function.\r\n     *\r\n     * */\r\n    public async sellSecurityToken(symbol : string, quantity : BigNumberish) : Promise<ExecuteOrderResult> {\r\n        return await this.blockchainService.e"
			}
		],
		"id": "howto\\Use library",
		"lastTouch": "2023-04-17T15:39:17.108Z"
	},
	{
		"name": "README",
		"path": "README.md",
		"folderPath": "",
		"fileContent": "# Liminal.market\n\n## Description\n\nMain package for liminal.market. Use this package to register user, trade securities, get symbols, prices, and positions.\n\n## Getting Started\n\n1. Install the npm package:\n\n```bash\nnpm install liminal.market\n```\n\n2. Include it in your browser:\n\n```html\n<script src=\"node_modules/liminal.market/dist/index.js\"></script>\n```\n\n3. Initiate the LiminalMarket class:\n\n```javascript\nimport { LiminalMarket } from 'liminal.market';\n\n// Use one of the following methods to initiate the LiminalMarket class:\nconst liminalMarket = LiminalMarket.getInstanceUsingPrivateKey(privateKey, chainId, serviceContractAddress);\nconst liminalMarket = LiminalMarket.getInstance(provider, serviceContractAddress);\nconst liminalMarket = LiminalMarket.getInstanceByWallet(wallet, serviceContractAddress);\n```\n\n:::note\nFor testing, use the Mumbai network with chain id 80001.\n:::\n\n:::info\nThe main class to use for LiminalMarket. Users should use this to communicate with Liminal.market.\n:::\n\n4. Check out the HowTo guides on how to use the library.\n\n## Reporting Bugs\n\n- Repository: [https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core](https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core)\n- Homepage: [https://liminal.market](https://liminal.market)\n- Bugs: [https://github.com/liminal-market/liminal.market.libraries/issues](https://github.com/liminal-market/liminal.market.libraries/issues)\n\n## Versioning\n\nCurrent version: 1.0.3\n\n## Authors\n\n- Author: [*****](mailto:*****)\n\n## License\n\nISC\n\n:::caution\nMake sure to replace any secret information, such as private keys, with ***** in your response.\n:::\n\n:::tip\nYou can use the Listener property to access the Listener class.\n:::\n\n:::danger\nEnsure that the provider has a signer and an account can be accessed, otherwise an error will be thrown.\n:::",
		"documentation": "# Liminal Market\n\n## Description\n\nLiminal Market is a JavaScript library that allows users to register, trade securities, get symbols, prices, and positions. This package is the main package for liminal.market.\n\n## Getting Started\n\n### Installation\n\nTo install the npm package, run the following command:\n\n```bash\nnpm install liminal.market\n```\n\n### Including in Browser\n\nTo include the library in your browser, add the following script tag to your HTML file:\n\n```html\n<script src=\"node_modules/liminal.market/dist/index.js\"></script>\n```\n\n### Initiating LiminalMarket Class\n\nTo initiate the LiminalMarket class, use the following code:\n\n```javascript\nimport { LiminalMarket } from 'liminal.market';\n\nconst liminalMarket = new LiminalMarket();\n```\n\n## HowTo Guides\n\nFor detailed guides on how to use the library, please navigate to the [HowTo section](https://liminal.market/docs/howto) of the documentation.\n\n## Reporting Bugs\n\nTo report bugs, please visit the [issues page](https://github.com/liminal-market/liminal.market.libraries/issues) on the GitHub repository.\n\n## Repository and Homepage\n\n- Repository: [https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core](https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core)\n- Homepage: [https://liminal.market](https://liminal.market)\n\n## Versioning\n\nThis project uses [SemVer](http://semver.org/) for versioning. The current version is 1.0.3.\n\n## Authors\n\n- Liminal Market Team\n\n## License\n\nThis project is licensed under the ISC License.",
		"isFolder": false,
		"updated": "2023-04-18T08:45:58.114Z",
		"sidebar_position": 1,
		"sidebar_label": "README",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": ".",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Create a \"ReadMe\" guide for the project, named \"liminal.market\".\r\nInclude the following:\r\nTitle, Description,\r\nGetting Started by installing npm package, how you include it in browser.\r\nHow you initiate it using LiminalMarket class\r\nHowTo guides on how to use the library, user should navigate to the HowTo section of the doc to learn how to use the library\r\nReporting bugs, repository and homepage\r\nVersioning\r\nAuthors\r\nLicense\r\n\r\nThis is the entry file:\r\n###\r\n{\r\n  \"name\": \"liminal.market\",\r\n  \"version\": \"1.0.3\",\r\n  \"description\": \"Main package for liminal.market. Use this package to register user, trade securities, get symbols, prices and positions\",\r\n  \"types\": \"dist/index.d.ts\",\r\n  \"main\": \"dist/index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"jest\",\r\n    \"build\": \"tsc --watch\",\r\n    \"start\": \"npx ts-node .\\\\tests\\\\test.ts\"\r\n  },\r\n  \"repository\": {\r\n    \"url\": \"https://github.com/liminal-market/liminal.market.libraries/tree/main/javascript/core\"\r\n  },\r\n  \"homepage\": \"https://liminal.market\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/liminal-market/liminal.market.libraries/issues\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"devDependencies\": {\r\n    \"@types/eventsource\": \"^1.1.11\",\r\n    \"@types/jest\": \"^29.4.0\",\r\n    \"jest\": \"^29.4.2\",\r\n    \"ts-jest\": \"^29.0.5\",\r\n    \"typescript\": \"^4.9.5\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@automapper/classes\": \"^8.7.7\",\r\n    \"@automapper/core\": \"^8.7.7\",\r\n    \"@types/node\": \"^18.13.0\",\r\n    \"ethers\": \"^5.7.2\",\r\n    \"eventsource\": \"^2.0.2\",\r\n    \"reflect-metadata\": \"^0.1.13\",\r\n    \"ts-loader\": \"^9.4.2\",\r\n    \"ts-node\": \"^10.9.1\"\r\n  }\r\n}\r\n\r\n###\r\n"
			}
		],
		"id": "README.md",
		"lastTouch": "2023-04-18T08:45:58.115Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "HowTo Example",
		"path": "howto\\howto_create_howto.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Add a HowTo in the Config File\n\n## Introduction\nIn this guide, we will learn how to add a HowTo in the config file. We will be using the `args` property to inject properties into the liquid template and the `file` property to append extracted content from a file to the liquid template. Developers must create a liquid template in the `.code-narrator/gpt_questions` directory, which will be used to ask GPT questions.\n\n## Step-by-Step Instructions\n\n1. **Create a liquid template file**: In your project directory, navigate to the `.code-narrator/gpt_questions` folder and create a new liquid template file (e.g., `howto_template.liquid`).\n\n2. **Add properties to the liquid template**: In the `howto_template.liquid` file, you can access any property set in `args` using the following syntax:\n\n   ```\n   {{ args.property_name }}\n   ```\n\n   For example, if you want to access a property called `title`, you would use `{{ args.title }}`.\n\n3. **Extract content from a file**: To append extracted content from a file to the liquid template, use the `file` property along with either JSONPath or the `extract` property that uses LLM (Language Model) to extract content from the file. Here's an example of how to use the `file` property:\n\n   ```\n   {{ file('path/to/your/file.json', '$.property_name') }}\n   ```\n\n4. **Update the config file**: In your project's config file (e.g., `config.yml`), add a new HowTo section with the necessary properties. For example:\n\n   ```yaml\n   howto:\n     title: \"How to Add a HowTo in the Config File\"\n     introduction: \"In this guide, we will learn how to add a HowTo in the config file.\"\n     template: \".code-narrator/gpt_questions/howto_template.liquid\"\n     args:\n       property_name: \"value\"\n   ```\n\n   Replace `property_name` and `value` with the appropriate property names and values you want to inject into the liquid template.\n\n5. **Test your configuration**: After updating the config file, test your configuration to ensure that the HowTo section is correctly added and the properties are properly injected into the liquid template.\n\nThat's it! You have successfully added a HowTo in the config file using the `args` and `file` properties.",
		"isFolder": false,
		"updated": "2023-04-17T16:00:22.677Z",
		"sidebar_position": 12,
		"sidebar_label": "HowTo Example",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Show how developer would add HowTo in config file,\r\nargs property is used to inject properties into liquid template, any property set in args can be access in liquid template with \r\nfile property appends extracted content of a file to liquid template, using JSONPath or the extract property that uses LLM to extract content from file\r\nDevelopers MUST create a liquid template in .code-narrator/gpt_questions, this template file is used to ask GPT question"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			}
		],
		"id": "howto\\howto_create_howto.md",
		"lastTouch": "2023-04-17T16:28:39.104Z",
		"data": {
			"parent": "HowTo Overview"
		}
	},
	{
		"name": "HowTo Overview",
		"path": "howto\\overview_readme.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# Overview of Files in the Directory\n\nThis is an overview of the files located in the directory. Each file serves a specific purpose and is briefly described below.\n\n## File 1: [filename1.md](filename1.md)\n\nShort description of the first file.\n\n## File 2: [filename2.md](filename2.md)\n\nShort description of the second file.\n\n## File 3: [filename3.md](filename3.md)\n\nShort description of the third file.\n\n## File 4: [filename4.md](filename4.md)\n\nShort description of the fourth file.\n\nPlease click on the respective file links to access their content.",
		"isFolder": false,
		"updated": "2023-04-17T16:00:45.195Z",
		"sidebar_position": 11,
		"sidebar_label": "HowTo Overview",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Give title and short description that this is an overview file for files located in directory\r\nGive short description of each file that is provided\r\nAdd link to each file, link should be the filename\r\n\r\n"
			},
			{
				"role": "assistant",
				"content": "This is first paragraph from file \"*.md\"\n                         \n                         This is first paragraph from file \"*.md\"\n                         # How to Add a HowTo in the Config File\n\n## Introduction\nIn this guide, we will learn how to add a HowTo in the config file. We will be using the `args` property to inject properties into the liquid template and the `file` property to append extracted content from a file to the liquid template. Developers must create a liquid template in the `.code...\n                         "
			}
		],
		"id": "howto\\overview_readme.md",
		"lastTouch": "2023-04-17T16:44:51.191Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "index.ts",
		"path": "src\\index.ts",
		"folderPath": "src",
		"fileContent": "import Network from \"./networks/Network\";\r\nimport {BigNumber, BigNumberish, ethers, Signer, Wallet} from \"ethers\";\r\nimport HttpRequest from \"./http/HttpRequest\";\r\nimport NetworkType from \"./networks/NetworkType\";\r\nimport {Account} from \"./dto/Account\";\r\nimport KycStatus from \"./dto/KycStatus\";\r\nimport AccountService from \"./services/AccountService\";\r\nimport BlockchainService from \"./services/BlockchainService\";\r\nimport Abis from \"./abis\";\r\nimport {Provider} from \"@ethersproject/abstract-provider\";\r\nimport ExecuteOrderResult from \"./dto/ExecuteOrderResult\";\r\nimport Listener from \"./services/Listener\";\r\nimport MumbaiNetwork from \"./networks/MumbaiNetwork\";\r\nimport Helper from \"./Helper\";\r\n\r\n/*\r\nThe main class to use for LiminalMarket. User should use this to communicate with Liminal.market.\r\nFor testing use Mumbai network, chain id 80001\r\n */\r\nexport default class LiminalMarket {\r\n    httpRequest : HttpRequest;\r\n    blockchainService : BlockchainService;\r\n    accountService : AccountService;\r\n    account : Account;\r\n    static Provider : any;\r\n    static Signer : any;\r\n    static ServiceContractAddress : string;\r\n    static Network : Network;\r\n    static WalletAddress : string;\r\n    static Bearer? : string;\r\n    public static Instance : LiminalMarket;\r\n    private constructor() {\r\n        this.httpRequest = new HttpRequest();\r\n        this.blockchainService = new BlockchainService();\r\n        this.accountService = new AccountService();\r\n        this.account = {} as Account;\r\n    }\r\n\r\n    public static async getInstanceUsingPrivateKey(privateKey : string, chainId : number, serviceContractAddress? : string | undefined){\r\n        LiminalMarket.Network = NetworkType.getInstance(chainId) ?? new MumbaiNetwork();\r\n        if (LiminalMarket.Network.ChainId == 0) {\r\n            throw new Error('Network is not supported. Using chainId ' + chainId + '. Try switching to different network, e.g. Mumbai');\r\n        }\r\n        let provider = new ethers.providers.JsonRpcProvider(LiminalMarket.Network.RpcUrl);\r\n        let wallet = new Wallet(privateKey, provider)\r\n        return await this.getInstanceByWallet(wallet, serviceContractAddress);\r\n    }\r\n\r\n    public static async getInstance(provider? : ethers.providers.JsonRpcProvider | undefined, serviceContractAddress? : string | undefined) {\r\n        if (!provider) {\r\n            // @ts-ignore\r\n            provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        }\r\n\r\n        let signer = await provider.getSigner();\r\n        if (!signer) {\r\n            throw new Error('Provider needs to have a signer.')\r\n        }\r\n\r\n        let address = await signer.getAddress()\r\n        if (!address) {\r\n            throw new Error('No account could be access')\r\n        }\r\n\r\n        let network = await provider.getNetwork()\r\n        return await this.load(address, provider, signer, network.chainId, serviceContractAddress)\r\n    }\r\n\r\n\r\n    public static async getInstanceByWallet(wallet : Wallet, serviceContractAddress? : string | undefined) {\r\n        if (this.Instance) return this.Instance;\r\n\r\n        if (!wallet) {\r\n            throw new Error('Provider cannot be null')\r\n        }\r\n        let chainId = await wallet.getChainId();\r\n\r\n        return await this.load(wallet.address,  wallet.provider,  wallet as any as Signer, chainId, serviceContractAddress);\r\n    }\r\n\r\n\r\n\r\n    private static async  load(walletAddress : string, provider : Provider, signer : Signer, chainId : number, serviceContractAddress : string | undefined) {\r\n        await Helper.loadLiminalMarket(walletAddress, provider, signer, chainId, serviceContractAddress)\r\n\r\n        let liminalMarket = new LiminalMarket();\r\n        liminalMarket.account = await liminalMarket.accountService.login();\r\n\r\n        this.Instance = liminalMarket;\r\n    }\r\n\r\n    public static get Listener() : Listener {\r\n        return Listener;\r\n    }\r\n\r\n    /**\r\n     * Return true if market is open, else false\r\n     */\r\n    public async isMarketOpen() : Promise<boolean> {\r\n        return (await this.httpRequest.get('isOpen')).marketIsOpen;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the user has been created at the broker, false if he does not exist at broker\r\n     * If it returns false, you can call createSandboxAccount to create the user at broker.\r\n     */\r\n    public hasAccount() : boolean {\r\n        return this.account.brokerId !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Create user on sandbox at the broker. This is for running on Mumbai testnet.\r\n     *\r\n     * @param {function} accountReadyEvent - function is called when the account is ready\r\n     */\r\n    public async createSandboxAccount(firstName : string, lastName : string, email : string,\r\n                                      accountReadyEvent? : () => Promise<void> | undefined) : Promise<string> {\r\n        return await this.accountService.createSandboxAccount(firstName, lastName, email, accountReadyEvent);\r\n    }\r\n\r\n    /**\r\n     * Returns the status of the account. Most important is if KYC has been approved.\r\n     * Trades cannot be executed if KYC is not valid.\r\n     */\r\n    public async kycStatus() : Promise<KycStatus> {\r\n        let accountService = new AccountService();\r\n        return await accountService.kycStatus();\r\n    }\r\n\r\n    /**\r\n     * Funds wallets sandbox account. There are limitation on how frequently you can fund your account.\r\n     **/\r\n    public async fundSandboxAccount(accountFunded? : (obj : any) => Promise<void> | undefined) {\r\n        return await this.accountService.fundSandboxAccount(accountFunded)\r\n    }\r\n\r\n    /**\r\n     * Get the balance of aUSD token.\r\n     * @param {string} [address] - Optional. Uses the address from the provider is address is not provided\r\n     */\r\n    public async getAUSDBalance(address? : string | undefined) : Promise<BigNumber> {\r\n        if (!address) address = LiminalMarket.WalletAddress;\r\n        return await this.getSecurityTokenQuantity(LiminalMarket.Network.AUSD_ADDRESS, address)\r\n    }\r\n\r\n    /**\r\n     * Return all symbols available in the system.\r\n     */\r\n    public async getSymbols() {\r\n        return await this.httpRequest.get('https://app.liminal.market/securities/securities.json')\r\n    }\r\n\r\n    /**\r\n     * Returns the position wallet address has. It is also possible to query any wallet address\r\n     * @param address\r\n     */\r\n    public async getPositions(address? : string) {\r\n        if (!address) address = LiminalMarket.WalletAddress;\r\n        return await this.httpRequest.get('positions', {address:address})\r\n    }\r\n\r\n    /**\r\n     * Get the balance of a security token.\r\n     * @param {string} [address] - Optional. Uses the address from the provider is address is not provided\r\n     */\r\n    public async getSecurityTokenQuantity(symbolOrAddress : string, address? : string | undefined) : Promise<BigNumber> {\r\n        if (!address) address = LiminalMarket.WalletAddress;\r\n        if (symbolOrAddress.indexOf('0x') == -1) {\r\n            symbolOrAddress = await this.getSecurityTokenAddress(symbolOrAddress);\r\n            if (symbolOrAddress == ethers.constants.AddressZero) return BigNumber.from(0);\r\n        }\r\n\r\n        const contract = new ethers.Contract(symbolOrAddress, Abis.BalanceOfAbi, LiminalMarket.Provider);\r\n        return await contract['balanceOf']!(address);\r\n    }\r\n\r\n    /**\r\n     * Get the address of a security token (symbol)\r\n     */\r\n    public async getSecurityTokenAddress(symbol: string) : Promise<string> {\r\n        const contract = new ethers.Contract(LiminalMarket.Network.LIMINAL_MARKET_ADDRESS, Abis.LiminalMarketAbi, LiminalMarket.Provider);\r\n        return await contract['getSecurityToken']!(symbol);\r\n    }\r\n\r\n\r\n    /**\r\n     * Send the command to buy a security token\r\n     * @param {string}  symbol - Symbol of the security to buy, e.g. AAPL for Apple.\r\n     * @param {string}  amount - Dollar amount in Wei, $100 is equal to 100 * 10**18. Buying for $54.32 would be 5432 * 10**16\r\n     * @param {function} [orderExecutedEvent] - Optional. Listens for the orderExecuted event on chain, then calls your function.\r\n     *\r\n     * */\r\n    public async buySecurityToken(symbol : string, amount : BigNumberish) : Promise<ExecuteOrderResult> {\r\n        return await this.blockchainService.executeOrder('buy', symbol, amount);\r\n    }\r\n\r\n    /**\r\n     * Send the command to sell a security token\r\n     * @param {string}  symbol - Symbol of the security to buy, e.g. AAPL for Apple.\r\n     * @param {string}  quantity - Quantity of shares to sell in Wei. Selling 10 shares would be 10 * 10**18. Selling 1.234 shares would be 123 * 10*15\r\n     * @param {function} [orderExecutedEvent] - Optional. Listens for the orderExecuted event on chain, then calls your function.\r\n     *\r\n     * */\r\n    public async sellSecurityToken(symbol : string, quantity : BigNumberish) : Promise<ExecuteOrderResult> {\r\n        return await this.blockchainService.executeOrder('sell', symbol, quantity);\r\n    }\r\n\r\n    /**\r\n     * Send the command to execute order depending on side (buy or sell)\r\n     * @param {string}  symbol - Symbol of the security to buy, e.g. AAPL for Apple.\r\n     * @param {string}  quantity - Quantity of shares to sell in Wei. Selling 10 shares would be 10 * 10**18. Selling 1.234 shares would be 123 * 10*15\r\n     * @param {function} [orderExecutedEvent] - Optional. Listens for the orderExecuted event on chain, then calls your function.\r\n     *\r\n     * */\r\n    public async executeOrder(side : string, symbol : string, quantity : BigNumberish) : Promise<ExecuteOrderResult> {\r\n        if (side != 'buy' && side != 'sell') {\r\n            throw new Error('side [' + side + '] is not valid. You can only set \"buy\" or \"sell\"');\r\n        }\r\n        return await this.blockchainService.executeOrder(side, symbol, quantity);\r\n    }\r\n\r\n\r\n\r\n\r\n}",
		"documentation": "# index.ts\n\nThis is a detailed documentation of the `index.ts` file, which is the main entry point for the LiminalMarket library. This library allows users to interact with the Liminal.market platform, providing functionality for account management, market data retrieval, and trading operations.\n\n## Table of Contents\n\n- [Class: LiminalMarket](#class-liminalmarket)\n  - [Constructor](#constructor)\n  - [Static Methods](#static-methods)\n    - [getInstanceUsingPrivateKey](#getinstanceusingprivatekey)\n    - [getInstance](#getinstance)\n    - [getInstanceByWallet](#getinstancebywallet)\n    - [load](#load)\n  - [Instance Methods](#instance-methods)\n    - [isMarketOpen](#ismarketopen)\n    - [hasAccount](#hasaccount)\n    - [createSandboxAccount](#createsandboxaccount)\n    - [kycStatus](#kycstatus)\n    - [fundSandboxAccount](#fundsandboxaccount)\n    - [getAUSDBalance](#getausdbalance)\n    - [getSecurityTokenQuantity](#getsecuritytokenquantity)\n  - [Properties](#properties)\n    - [Listener](#listener)\n\n## Class: LiminalMarket\n\nThe main class to use for LiminalMarket. Users should use this class to communicate with Liminal.market. For testing, use the Mumbai network with chain id 80001.\n\n### Constructor\n\nThe constructor is private and should not be called directly. Instead, use one of the static methods to create an instance of the LiminalMarket class.\n\n### Static Methods\n\n#### getInstanceUsingPrivateKey\n\n```typescript\npublic static async getInstanceUsingPrivateKey(privateKey: string, chainId: number, serviceContractAddress?: string | undefined): Promise<LiminalMarket>\n```\n\nCreates a new instance of the LiminalMarket class using a private key, chain id, and an optional service contract address. Returns a Promise that resolves to the created LiminalMarket instance.\n\n#### getInstance\n\n```typescript\npublic static async getInstance(provider?: ethers.providers.JsonRpcProvider | undefined, serviceContractAddress?: string | undefined): Promise<LiminalMarket>\n```\n\nCreates a new instance of the LiminalMarket class using an optional provider and an optional service contract address. Returns a Promise that resolves to the created LiminalMarket instance.\n\n#### getInstanceByWallet\n\n```typescript\npublic static async getInstanceByWallet(wallet: Wallet, serviceContractAddress?: string | undefined): Promise<LiminalMarket>\n```\n\nCreates a new instance of the LiminalMarket class using a wallet and an optional service contract address. Returns a Promise that resolves to the created LiminalMarket instance.\n\n#### load\n\n```typescript\nprivate static async load(walletAddress: string, provider: Provider, signer: Signer, chainId: number, serviceContractAddress: string | undefined): Promise<void>\n```\n\nA private method that initializes the LiminalMarket instance with the provided wallet address, provider, signer, chain id, and service contract address.\n\n### Instance Methods\n\n#### isMarketOpen\n\n```typescript\npublic async isMarketOpen(): Promise<boolean>\n```\n\nReturns a Promise that resolves to `true` if the market is open, and `false` otherwise.\n\n#### hasAccount\n\n```typescript\npublic hasAccount(): boolean\n```\n\nReturns `true` if the user has been created at the broker, and `false` if they do not exist at the broker. If it returns `false`, you can call `createSandboxAccount` to create the user at the broker.\n\n#### createSandboxAccount\n\n```typescript\npublic async createSandboxAccount(firstName: string, lastName: string, email: string, accountReadyEvent?: () => Promise<void> | undefined): Promise<string>\n```\n\nCreates a user on the sandbox at the broker. This is for running on the Mumbai testnet. Returns a Promise that resolves to a string representing the created account.\n\n#### kycStatus\n\n```typescript\npublic async kycStatus(): Promise<KycStatus>\n```\n\nReturns the status of the account as a Promise that resolves to a `KycStatus` object. Most important is if KYC has been approved. Trades cannot be executed if KYC is not valid.\n\n#### fundSandboxAccount\n\n```typescript\npublic async fundSandboxAccount(accountFunded?: (obj: any) => Promise<void> | undefined): Promise<void>\n```\n\nFunds the wallet's sandbox account. There are limitations on how frequently you can fund your account. Returns a Promise that resolves when the account is funded.\n\n#### getAUSDBalance\n\n```typescript\npublic async getAUSDBalance(address?: string | undefined): Promise<BigNumber>\n```\n\nGets the balance of the aUSD token for the specified address. If no address is provided, it uses the address from the provider. Returns a Promise that resolves to a `BigNumber` representing the balance.\n\n#### getSecurityTokenQuantity\n\n```typescript\npublic async getSecurityTokenQuantity(LiminalMarket: any, address?: string | undefined): Promise<BigNumber>\n```\n\nGets the quantity of security tokens for the specified address. If no address is provided, it uses the address from the provider. Returns a Promise that resolves to a `BigNumber` representing the quantity.\n\n### Properties\n\n#### Listener\n\n```typescript\npublic static get Listener(): Listener\n```\n\nA static property that returns a `Listener` object for listening to events on the LiminalMarket platform.",
		"isFolder": false,
		"updated": "2023-04-18T08:44:53.608Z",
		"sidebar_position": 2,
		"sidebar_label": "index.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"index.ts\"\r\nThe file name is: index.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Network from \"./networks/Network\";\r\nimport {BigNumber, BigNumberish, ethers, Signer, Wallet} from \"ethers\";\r\nimport HttpRequest from \"./http/HttpRequest\";\r\nimport NetworkType from \"./networks/NetworkType\";\r\nimport {Account} from \"./dto/Account\";\r\nimport KycStatus from \"./dto/KycStatus\";\r\nimport AccountService from \"./services/AccountService\";\r\nimport BlockchainService from \"./services/BlockchainService\";\r\nimport Abis from \"./abis\";\r\nimport {Provider} from \"@ethersproject/abstract-provider\";\r\nimport ExecuteOrderResult from \"./dto/ExecuteOrderResult\";\r\nimport Listener from \"./services/Listener\";\r\nimport MumbaiNetwork from \"./networks/MumbaiNetwork\";\r\nimport Helper from \"./Helper\";\r\n\r\n/*\r\nThe main class to use for LiminalMarket. User should use this to communicate with Liminal.market.\r\nFor testing use Mumbai network, chain id 80001\r\n */\r\nexport default class LiminalMarket {\r\n    httpRequest : HttpRequest;\r\n    blockchainService : BlockchainService;\r\n    accountService : AccountService;\r\n    account : Account;\r\n    static Provider : any;\r\n    static Signer : any;\r\n    static ServiceContractAddress : string;\r\n    static Network : Network;\r\n    static WalletAddress : string;\r\n    static Bearer? : string;\r\n    public static Instance : LiminalMarket;\r\n    private constructor() {\r\n        this.httpRequest = new HttpRequest();\r\n        this.blockchainService = new BlockchainService();\r\n        this.accountService = new AccountService();\r\n        this.account = {} as Account;\r\n    }\r\n\r\n    public static async getInstanceUsingPrivateKey(privateKey : string, chainId : number, serviceContractAddress? : string | undefined){\r\n        LiminalMarket.Network = NetworkType.getInstance(chainId) ?? new MumbaiNetwork();\r\n        if (LiminalMarket.Network.ChainId == 0) {\r\n            throw new Error('Network is not supported. Using chainId ' + chainId + '. Try switching to different network, e.g. Mumbai');\r\n        }\r\n        let provider = new ethers.providers.JsonRpcProvider(LiminalMarket.Network.RpcUrl);\r\n        let wallet = new Wallet(privateKey, provider)\r\n        return await this.getInstanceByWallet(wallet, serviceContractAddress);\r\n    }\r\n\r\n    public static async getInstance(provider? : ethers.providers.JsonRpcProvider | undefined, serviceContractAddress? : string | undefined) {\r\n        if (!provider) {\r\n            // @ts-ignore\r\n            provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        }\r\n\r\n        let signer = await provider.getSigner();\r\n        if (!signer) {\r\n            throw new Error('Provider needs to have a signer.')\r\n        }\r\n\r\n        let address = await signer.getAddress()\r\n        if (!address) {\r\n            throw new Error('No account could be access')\r\n        }\r\n\r\n        let network = await provider.getNetwork()\r\n        return await this.load(address, provider, signer, network.chainId, serviceContractAddress)\r\n    }\r\n\r\n\r\n    public static async getInstanceByWallet(wallet : Wallet, serviceContractAddress? : string | undefined) {\r\n        if (this.Instance) return this.Instance;\r\n\r\n        if (!wallet) {\r\n            throw new Error('Provider cannot be null')\r\n        }\r\n        let chainId = await wallet.getChainId();\r\n\r\n        return await this.load(wallet.address,  wallet.provider,  wallet as any as Signer, chainId, serviceContractAddress);\r\n    }\r\n\r\n\r\n\r\n    private static async  load(walletAddress : string, provider : Provider, signer : Signer, chainId : number, serviceContractAddress : string | undefined) {\r\n        await Helper.loadLiminalMarket(walletAddress, provider, signer, chainId, serviceContractAddress)\r\n\r\n        let liminalMarket = new LiminalMarket();\r\n        liminalMarket.account = await liminalMarket.accountService.login();\r\n\r\n        this.Instance = liminalMarket;\r\n    }\r\n\r\n    public static get Listener() : Listener {\r\n        return Listener;\r\n    }\r\n\r\n    /**\r\n     * Return true if market is open, else false\r\n     */\r\n    public async isMarketOpen() : Promise<boolean> {\r\n        return (await this.httpRequest.get('isOpen')).marketIsOpen;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the user has been created at the broker, false if he does not exist at broker\r\n     * If it returns false, you can call createSandboxAccount to create the user at broker.\r\n     */\r\n    public hasAccount() : boolean {\r\n        return this.account.brokerId !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Create user on sandbox at the broker. This is for running on Mumbai testnet.\r\n     *\r\n     * @param {function} accountReadyEvent - function is called when the account is ready\r\n     */\r\n    public async createSandboxAccount(firstName : string, lastName : string, email : string,\r\n                                      accountReadyEvent? : () => Promise<void> | undefined) : Promise<string> {\r\n        return await this.accountService.createSandboxAccount(firstName, lastName, email, accountReadyEvent);\r\n    }\r\n\r\n    /**\r\n     * Returns the status of the account. Most important is if KYC has been approved.\r\n     * Trades cannot be executed if KYC is not valid.\r\n     */\r\n    public async kycStatus() : Promise<KycStatus> {\r\n        let accountService = new AccountService();\r\n        return await accountService.kycStatus();\r\n    }\r\n\r\n    /**\r\n     * Funds wallets sandbox account. There are limitation on how frequently you can fund your account.\r\n     **/\r\n    public async fundSandboxAccount(accountFunded? : (obj : any) => Promise<void> | undefined) {\r\n        return await this.accountService.fundSandboxAccount(accountFunded)\r\n    }\r\n\r\n    /**\r\n     * Get the balance of aUSD token.\r\n     * @param {string} [address] - Optional. Uses the address from the provider is address is not provided\r\n     */\r\n    public async getAUSDBalance(address? : string | undefined) : Promise<BigNumber> {\r\n        if (!address) address = LiminalMarket.WalletAddress;\r\n        return await this.getSecurityTokenQuantity(LiminalM"
			}
		],
		"id": "src\\index.ts",
		"lastTouch": "2023-04-18T08:44:53.609Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "Account",
		"path": "howto\\howto_account.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Create and Manage an Account with LiminalMarket\n\n## Introduction\n\nThis guide will walk you through the process of creating an account, checking if an account exists, verifying the KYC status, funding the account on the test network, and getting the aUSD balance using the LiminalMarket class.\n\n## Step-by-Step Instructions\n\n### Step 1: Create a Sandbox Account\n\nTo create a new account, you need to call the `createSandboxAccount` function with the required parameters.\n\n```javascript\nconst liminalMarket = new LiminalMarket();\n\nconst firstName = \"John\";\nconst lastName = \"Doe\";\nconst email = \"john.doe@example.com\";\n\nconst accountReadyEvent = async () => {\n  console.log(\"Account is ready\");\n};\n\nconst accountId = await liminalMarket.createSandboxAccount(firstName, lastName, email, accountReadyEvent);\nconsole.log(\"Account ID:\", accountId);\n```\n\n### Step 2: Check if Account Exists\n\nTo check if an account exists, you can call the `hasAccount` function.\n\n```javascript\nconst accountExists = liminalMarket.hasAccount();\nconsole.log(\"Account exists:\", accountExists);\n```\n\n### Step 3: Check KYC Status\n\nTo check the KYC status of an account, you can call the `kycStatus` function.\n\n```javascript\nconst kycStatus = await liminalMarket.kycStatus();\nconsole.log(\"KYC Status:\", kycStatus);\n```\n\n### Step 4: Fund the Account on Test Network\n\nTo fund the account on the test network, you can call the `fundSandboxAccount` function.\n\n```javascript\nconst accountFunded = async (obj) => {\n  console.log(\"Account funded:\", obj);\n};\n\nawait liminalMarket.fundSandboxAccount(accountFunded);\n```\n\n### Step 5: Get the aUSD Balance\n\nTo get the aUSD balance of an account, you can call the `getAUSDBalance` function.\n\n```javascript\nconst address = \"*****\"; // Replace with the account address\nconst balance = await liminalMarket.getAUSDBalance(address);\nconsole.log(\"aUSD Balance:\", balance.toString());\n```\n\nBy following these steps, you can create and manage an account using the LiminalMarket class.",
		"isFolder": false,
		"updated": "2023-04-17T16:49:17.159Z",
		"sidebar_position": 12,
		"sidebar_label": "Account",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "show how to create account calling the LiminalMarket class\r\nhow to check is account exists, using hasAccount\r\nhow to check kycStatus\r\nhow to fund the account on test network (fundSandboxAccount)\r\nhow to get the aUSD balance"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "Content to help: {\"functions\":[{\"name\":\"createSandboxAccount\",\"params\":[\"firstName: string\",\"lastName: string\",\"email: string\",\"accountReadyEvent?: () => Promise<void> | undefined\"],\"returnType\":\"Promise<string>\"},{\"name\":\"hasAccount\",\"params\":[],\"returnType\":\"boolean\"},{\"name\":\"kycStatus\",\"params\":[],\"returnType\":\"Promise<KycStatus>\"},{\"name\":\"fundSandboxAccount\",\"params\":[\"accountFunded?: (obj: any) => Promise<void> | undefined\"],\"returnType\":\"Promise<void>\"},{\"name\":\"getAUSDBalance\",\"params\":[\"address?: string | undefined\"],\"returnType\":\"Promise<BigNumber>\"}]}"
			}
		],
		"id": "howto\\howto_account.md",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"parent": "HowTo Overview"
		}
	},
	{
		"name": "Market",
		"path": "howto\\howto_marketdata.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How To Guide: Interacting with LiminalMarket\n\nIn this guide, we will cover how to interact with the `LiminalMarket` class to perform various tasks such as checking if the market is open, getting positions for an account, retrieving all symbols, and obtaining the token quantity on an account.\n\n## Introduction\n\nThe `LiminalMarket` class provides a set of functions that allow you to interact with the market and perform various tasks. The functions we will cover in this guide are:\n\n1. `isMarketOpen()`\n2. `positions()`\n3. `getSymbols()`\n4. `getSecurityTokenQuantity()`\n\n## Step-by-Step Instructions\n\n### Step 1: Import the LiminalMarket class\n\nFirst, you need to import the `LiminalMarket` class into your project. To do this, add the following line at the beginning of your code:\n\n```python\nfrom liminal_market import LiminalMarket\n```\n\n### Step 2: Instantiate the LiminalMarket class\n\nNext, create an instance of the `LiminalMarket` class:\n\n```python\nmarket = LiminalMarket()\n```\n\n### Step 3: Check if the market is open\n\nTo check if the market is open, call the `isMarketOpen()` function:\n\n```python\nis_open = market.isMarketOpen()\nprint(f\"Market is open: {is_open}\")\n```\n\n### Step 4: Get positions for an account\n\nTo get the positions for an account, call the `positions()` function with the account ID as a parameter:\n\n```python\naccount_id = \"*****\"  # Replace with your account ID\npositions = market.positions(account_id)\nprint(f\"Positions for account {account_id}: {positions}\")\n```\n\n### Step 5: Get all symbols\n\nTo get all symbols, call the `getSymbols()` function:\n\n```python\nsymbols = market.getSymbols()\nprint(\"All symbols:\", symbols)\n```\n\n### Step 6: Get token quantity on an account\n\nTo get the token quantity on an account, call the `getSecurityTokenQuantity()` function with the account ID and the symbol as parameters:\n\n```python\naccount_id = \"*****\"  # Replace with your account ID\nsymbol = \"BTC\"\ntoken_quantity = market.getSecurityTokenQuantity(account_id, symbol)\nprint(f\"Token quantity for {symbol} on account {account_id}: {token_quantity}\")\n```\n\nThat's it! You have now learned how to interact with the `LiminalMarket` class to perform various tasks.",
		"isFolder": false,
		"updated": "2023-04-17T16:51:07.815Z",
		"sidebar_position": 13,
		"sidebar_label": "Market",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "how to check if market is open\r\nshow how to get positions for account\r\nhow to get all symbols\r\nhow to get token quantity on account\r\n"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "Content to help: {\"functions\":[\"isMarketOpen\",\"positions\",\"getSymbols\",\"getSecurityTokenQuantity\"],\"class\":\"LiminalMarket\"}"
			}
		],
		"id": "howto\\howto_marketdata.md",
		"lastTouch": "2023-04-17T16:51:07.817Z",
		"data": {
			"parent": "HowTo Overview"
		}
	},
	{
		"name": "Trading",
		"path": "howto\\howto_trade.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How To Guide: LiminalMarket Class in JavaScript\n\n## Introduction\n\nIn this guide, we will learn how to use the LiminalMarket class in JavaScript to buy and sell security tokens, and call the executeOrder function. The LiminalMarket class provides methods to interact with the market and perform various operations related to security tokens.\n\n## Step-by-Step Instructions\n\n### 1. Instantiate the LiminalMarket class\n\nFirst, create an instance of the LiminalMarket class. In this example, we will assume that the instance variable is named `liminalMarket`.\n\n```javascript\nconst liminalMarket = new LiminalMarket();\n```\n\n### 2. Buy a security token\n\nTo buy a security token, call the `buySecurityToken` method with the symbol of the security and the dollar amount in Wei.\n\n```javascript\nconst symbol = \"AAPL\"; // Apple Inc.\nconst amount = 100 * 10 ** 18; // $100 in Wei\n\nliminalMarket.buySecurityToken(symbol, amount)\n  .then(result => {\n    console.log(\"Buy order executed:\", result);\n  })\n  .catch(error => {\n    console.error(\"Error executing buy order:\", error);\n  });\n```\n\n### 3. Sell a security token\n\nTo sell a security token, call the `sellSecurityToken` method with the symbol of the security and the quantity of shares in Wei.\n\n```javascript\nconst symbol = \"AAPL\"; // Apple Inc.\nconst quantity = 10 * 10 ** 18; // 10 shares in Wei\n\nliminalMarket.sellSecurityToken(symbol, quantity)\n  .then(result => {\n    console.log(\"Sell order executed:\", result);\n  })\n  .catch(error => {\n    console.error(\"Error executing sell order:\", error);\n  });\n```\n\n### 4. Call the executeOrder function\n\nTo execute an order, call the `executeOrder` method with the side of the order (either 'buy' or 'sell'), the symbol of the security, and the quantity of shares in Wei.\n\n```javascript\nconst side = \"buy\"; // or \"sell\"\nconst symbol = \"AAPL\"; // Apple Inc.\nconst quantity = 10 * 10 ** 18; // 10 shares in Wei\n\nliminalMarket.executeOrder(side, symbol, quantity)\n  .then(result => {\n    console.log(\"Order executed:\", result);\n  })\n  .catch(error => {\n    console.error(\"Error executing order:\", error);\n  });\n```\n\nThat's it! You now know how to use the LiminalMarket class in JavaScript to buy and sell security tokens and call the executeOrder function.",
		"isFolder": false,
		"updated": "2023-04-17T17:57:38.477Z",
		"sidebar_position": 11,
		"sidebar_label": "Trading",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Give detail description and examples in Javascript.\r\nClass name is LiminalMarket, assume the instance variable is named liminalMarket\r\nhow to buy security token\r\nhow to sell security token\r\nhow to call executeOrder\r\n"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "Content to help:\n{\"buySecurityToken\":{\"description\":\"Send the command to buy a security token\",\"params\":[{\"name\":\"symbol\",\"type\":\"string\",\"description\":\"Symbol of the security to buy, e.g. AAPL for Apple.\"},{\"name\":\"amount\",\"type\":\"BigNumberish\",\"description\":\"Dollar amount in Wei, $100 is equal to 100 * 10**18. Buying for $54.32 would be 5432 * 10**16\"}],\"returns\":{\"type\":\"Promise<ExecuteOrderResult>\",\"description\":\"The result of the executed order\"}},\"sellSecurityToken\":{\"description\":\"Send the command to sell a security token\",\"params\":[{\"name\":\"symbol\",\"type\":\"string\",\"description\":\"Symbol of the security to buy, e.g. AAPL for Apple.\"},{\"name\":\"quantity\",\"type\":\"BigNumberish\",\"description\":\"Quantity of shares to sell in Wei. Selling 10 shares would be 10 * 10**18. Selling 1.234 shares would be 123 * 10*15\"}],\"returns\":{\"type\":\"Promise<ExecuteOrderResult>\",\"description\":\"The result of the executed order\"}},\"executeOrder\":{\"description\":\"Send the command to execute order depending on side (buy or sell)\",\"params\":[{\"name\":\"side\",\"type\":\"string\",\"description\":\"The side of the order, either 'buy' or 'sell'\"},{\"name\":\"symbol\",\"type\":\"string\",\"description\":\"Symbol of the security to buy, e.g. AAPL for Apple.\"},{\"name\":\"quantity\",\"type\":\"BigNumberish\",\"description\":\"Quantity of shares to sell in Wei. Selling 10 shares would be 10 * 10**18. Selling 1.234 shares would be 123 * 10*15\"}],\"returns\":{\"type\":\"Promise<ExecuteOrderResult>\",\"description\":\"The result of the executed order\"}}}\n"
			}
		],
		"id": "howto\\howto_trade.md",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "Market",
		"path": "howto\\howto_market.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How To: Check Market Status, Get Account Positions, and Retrieve Symbols and Token Quantity in JavaScript\n\n## Introduction\n\nIn this guide, we will walk you through the process of checking if the market is open, retrieving positions for an account, getting all available symbols, and obtaining the token quantity for a specific security (e.g., MSFT) using JavaScript.\n\n## Step-by-Step Instructions\n\n### 1. Check if the market is open\n\nTo check if the market is open, you can use the `isMarketOpen` function. Here's an example of how to use it:\n\n```javascript\nasync function isMarketOpen() {\n  // Your implementation here\n  // Return true if the market is open, false otherwise\n}\n\nisMarketOpen().then((isOpen) => {\n  console.log(\"Is the market open?\", isOpen);\n});\n```\n\n### 2. Get positions for an account\n\nTo get the positions for an account, you can use the `positions` function. Here's an example of how to use it:\n\n```javascript\nasync function positions(accountId) {\n  // Your implementation here\n  // Return an array of positions for the given account ID\n}\n\nconst accountId = \"your_account_id\";\npositions(accountId).then((positions) => {\n  console.log(\"Positions for account:\", positions);\n});\n```\n\n### 3. Get all symbols\n\nTo get all available symbols, you can use the `getSymbols` function. Here's an example of how to use it:\n\n```javascript\nasync function getSymbols() {\n  // Your implementation here\n  // Return an array of all available symbols\n}\n\ngetSymbols().then((symbols) => {\n  console.log(\"All symbols:\", symbols);\n});\n```\n\n### 4. Get token quantity for a specific security\n\nTo get the token quantity for a specific security, such as MSFT, you can use the `getSecurityTokenQuantity` function. Here's an example of how to use it:\n\n```javascript\nasync function getSecurityTokenQuantity(accountId, symbol) {\n  // Your implementation here\n  // Return the token quantity for the given symbol and account ID\n}\n\nconst accountId = \"your_account_id\";\nconst symbol = \"MSFT\";\ngetSecurityTokenQuantity(accountId, symbol).then((quantity) => {\n  console.log(`Token quantity for ${symbol}:`, quantity);\n});\n```\n\nBy following these step-by-step instructions, you can easily check the market status, retrieve account positions, get all available symbols, and obtain the token quantity for a specific security using JavaScript.",
		"isFolder": false,
		"updated": "2023-04-17T17:09:45.082Z",
		"sidebar_position": 11,
		"sidebar_label": "Market",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Assume user as initated the class, give example in javascript\r\nhow to check if market is open\r\nshow how to get positions for account\r\nhow to get all symbols\r\nhow to get token quantity on account, e.g. MSFT\r\n"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "Content to help: {\"functions\":[{\"name\":\"isMarketOpen\",\"position\":123},{\"name\":\"positions\",\"position\":363},{\"name\":\"getSymbols\",\"position\":330},{\"name\":\"getSecurityTokenQuantity\",\"position\":308}]}"
			}
		],
		"id": "howto\\howto_market.md",
		"lastTouch": "2023-04-18T08:41:51.943Z",
		"data": {
			"has_children": true
		}
	}
]